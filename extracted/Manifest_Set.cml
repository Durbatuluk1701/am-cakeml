type 'a manifest_set = 'a list

(** val manifest_set_to_JSON :
    'a1 coq_Jsonifiable -> 'a1 manifest_set -> coq_JSON **)

fun manifest_set_to_JSON h m =
  JSON_Array (map (let val Build_Jsonifiable to_JSON _ = h in to_JSON end) m)

(** val coq_JSON_to_manifest_set :
    'a1 coq_Jsonifiable -> coq_JSON -> ('a1 manifest_set, coq_StringT)
    coq_ResultT **)

fun coq_JSON_to_manifest_set h js = case js of
  JSON_Array m =>
  result_map (let val Build_Jsonifiable _ from_JSON = h in from_JSON end) m
| _ => Coq_errC errStr_json_to_manifest_set

(** val jsonifiable_manifest_set :
    'a1 coq_Jsonifiable -> 'a1 manifest_set coq_Jsonifiable **)

fun jsonifiable_manifest_set h =
  Build_Jsonifiable (manifest_set_to_JSON h) (coq_JSON_to_manifest_set h)

(** val manifest_set_empty : 'a1 manifest_set **)

val manifest_set_empty =
  []

(** val manset_add :
    'a1 coq_EqClass -> 'a1 -> 'a1 manifest_set -> 'a1 manifest_set **)

fun manset_add hA a s = case s of
  [] => a :: []
| h :: t => (case eqb hA a h of
               True => s
             | False => h :: (manset_add hA a t))

(** val in_dec_set : 'a1 coq_EqClass -> 'a1 -> 'a1 manifest_set -> bool **)

fun in_dec_set hA a s =
  in_dec (coq_EqClass_impl_DecEq hA) a s

(** val manset_union :
    'a1 coq_EqClass -> 'a1 manifest_set -> 'a1 manifest_set -> 'a1
    manifest_set **)

fun manset_union hA a b = case b of
  [] => a
| h :: t => manset_union hA (manset_add hA h a) t
