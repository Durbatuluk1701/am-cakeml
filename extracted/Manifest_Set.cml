type 'a manifest_set = 'a list

(** val manifest_set_empty : 'a1 manifest_set **)

val manifest_set_empty =
  []

(** val manset_add : 'a1 -> 'a1 manifest_set -> 'a1 manifest_set **)

fun manset_add x s =
  x :: s

(** val list_to_manset : 'a1 list -> 'a1 manifest_set **)

fun list_to_manset ls =
  ls

(** val filter_manset :
    ('a1 -> bool) -> 'a1 manifest_set -> 'a1 manifest_set **)

val filter_manset =
  filter

(** val list_beq : ('a1 -> 'a1 -> bool) -> 'a1 list -> 'a1 list -> bool **)

fun list_beq eq_A x y =
  case x of
    [] => (case y of
             [] => True
           | _ :: _ => False)
  | x0 :: x1 =>
    (case y of
       [] => False
     | x2 :: x3 =>
       (case eq_A x0 x2 of
          True => list_beq eq_A x1 x3
        | False => False))

(** val is_empty_manset : 'a1 coq_EqClass -> 'a1 manifest_set -> bool **)

fun is_empty_manset h s =
  list_beq (eqb h) s manifest_set_empty

(** val in_dec_set :
    ('a1 -> 'a1 -> sumbool) -> 'a1 -> 'a1 manifest_set -> sumbool **)

val in_dec_set =
  in_dec
