type ('a, 'b) coq_MapC = ('a * 'b) list

(** val map_get :
    'a1 coq_EqClass -> ('a1, 'a2) coq_MapC -> 'a1 -> 'a2 option **)

fun map_get h m x =
  case m of
    [] => None
  | p :: m' =>
    let val (k, v) = p in
    (case eqb h k x of
       True => Some v
     | False => map_get h m' x) end

(** val map_set :
    'a1 coq_EqClass -> ('a1, 'a2) coq_MapC -> 'a1 -> 'a2 -> ('a1, 'a2)
    coq_MapC **)

fun map_set h m x v =
  case m of
    [] => (x, v) :: []
  | p :: t =>
    let val (hk, hv) = p in
    (case eqb h hk x of
       True => (hk, v) :: t
     | False => (hk, hv) :: (map_set h t x v)) end

(** val map_vals : 'a1 coq_EqClass -> ('a1, 'a2) coq_MapC -> 'a2 list **)

fun map_vals h m = case m of
  [] => []
| p :: m' => let val (_, v) = p in v :: (map_vals h m') end

(** val map_map :
    'a1 coq_EqClass -> ('a2 -> 'a3) -> ('a1, 'a2) coq_MapC -> ('a1, 'a3)
    coq_MapC **)

fun map_map hA f m = case m of
  [] => []
| p :: m' => let val (k, v) = p in (k, (f v)) :: (map_map hA f m') end

(** val id_map_to_string_map :
    coq_ID_Type coq_Serializable -> (coq_ID_Type, 'a1) coq_MapC -> (string,
    'a1) coq_MapC **)

fun id_map_to_string_map h m = case m of
  [] => []
| p :: m' =>
  let val (k, v) = p in
  ((let val Build_Serializable to_string _ = h in to_string k end),
  v) :: (id_map_to_string_map h m') end

(** val string_map_to_id_map :
    coq_ID_Type coq_Serializable -> (string, 'a1) coq_MapC -> ((coq_ID_Type,
    'a1) coq_MapC, string) coq_ResultT **)

fun string_map_to_id_map h m = case m of
  [] => Coq_resultC []
| p :: m' =>
  let val (k, v) = p in
  (case let val Build_Serializable _ from_string = h in from_string k end of
     Coq_errC e => Coq_errC e
   | Coq_resultC k' =>
     (case string_map_to_id_map h m' of
        Coq_errC e => Coq_errC e
      | Coq_resultC m'' => Coq_resultC ((k', v) :: m''))) end

type ('a, 'b) coq_MapD = ('a * 'b) list
