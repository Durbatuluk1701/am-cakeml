type ('a, 'b) coq_MapC = ('a, 'b) prod list

(** val map_empty : 'a1 coq_EqClass -> ('a1, 'a2) coq_MapC **)

fun map_empty _ =
  []

(** val map_get :
    'a1 coq_EqClass -> ('a1, 'a2) coq_MapC -> 'a1 -> 'a2 option **)

fun map_get h m x =
  case m of
    [] => None
  | p :: m' =>
    let val Coq_pair k v = p in
    (case eqb h k x of
       True => Some v
     | False => map_get h m' x) end

(** val map_set :
    'a1 coq_EqClass -> ('a1, 'a2) coq_MapC -> 'a1 -> 'a2 -> ('a1, 'a2)
    coq_MapC **)

fun map_set h m x v =
  case m of
    [] => (Coq_pair x v) :: []
  | p :: t =>
    let val Coq_pair hk hv = p in
    (case eqb h hk x of
       True => (Coq_pair hk v) :: t
     | False => (Coq_pair hk hv) :: (map_set h t x v)) end

(** val map_vals : 'a1 coq_EqClass -> ('a1, 'a2) coq_MapC -> 'a2 list **)

fun map_vals h m = case m of
  [] => []
| p :: m' => let val Coq_pair _ v = p in v :: (map_vals h m') end

type ('a, 'b) coq_MapD = ('a, 'b) prod list

(** val mapD_get_key :
    'a1 coq_EqClass -> 'a2 coq_EqClass -> ('a1, 'a2) coq_MapD -> 'a2 -> 'a1
    option **)

fun mapD_get_key h h1 m v =
  case m of
    [] => None
  | p :: m' =>
    let val Coq_pair k v' = p in
    (case eqb h1 v v' of
       True => Some k
     | False => mapD_get_key h h1 m' v) end
