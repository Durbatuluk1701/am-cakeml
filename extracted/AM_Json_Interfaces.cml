(** val do_appraisal_session :
    coq_ProtocolAppraiseRequest -> coq_AM_Config -> coq_BS ->
    (coq_ProtocolAppraiseResponse, coq_StringT) coq_ResultT **)

fun do_appraisal_session appreq ac nonceVal =
  let val Coq_mkPAReq t p et ev = appreq in
  let val expected_et = eval t p et in
  let val app_am = gen_appraise_AM expected_et ev in
  let val init_noncemap = (O, nonceVal) :: [] in
  let val init_nonceid = S O in
  let val my_amst = Coq_mkAM_St init_noncemap init_nonceid ac in
  (case run_am_app_comp_init app_am my_amst of
     Coq_errC e => Coq_errC e
   | Coq_resultC appres => Coq_resultC (Coq_mkPAResp True appres)) end end end end end end

(** val handle_AM_request_JSON :
    coq_JSON -> coq_AM_Config -> coq_BS -> coq_JSON **)

fun handle_AM_request_JSON js ac nonceVal =
  case coq_JSON_to_AM_Protocol_Request js of
    Coq_errC msg => coq_ErrorResponseJSON msg
  | Coq_resultC a =>
    (case a of
       Protocol_Run_Request r =>
       let val Coq_mkPRReq cop_term _ ev = r in
       let val cvm_resp = run_cvm_rawEv cop_term ev ac in
       (case cvm_resp of
          Coq_errC e => coq_ErrorResponseJSON e
        | Coq_resultC res_ev =>
          coq_ProtocolRunResponse_to_JSON (Coq_mkPRResp True res_ev)) end end
     | Protocol_Negotiate_Request _ =>
       coq_ErrorResponseJSON errStr_negotiation_not_implemented
     | Protocol_Appraise_Request appreq =>
       let val app_resp = do_appraisal_session appreq ac nonceVal in
       (case app_resp of
          Coq_errC e => coq_ErrorResponseJSON e
        | Coq_resultC app_resp0 =>
          coq_ProtocolAppraiseResponse_to_JSON app_resp0) end)
