(** val manifest_generator_plcTerm_list :
    (coq_Term, coq_Plc) prod list -> coq_EnvironmentM list **)

fun manifest_generator_plcTerm_list ls =
  map (fn pat => let val Coq_pair t p = pat in manifest_generator t p end) ls

(** val env_list_union : coq_EnvironmentM list -> coq_EnvironmentM **)

fun env_list_union ls =
  fold_right environment_union e_empty ls

(** val mangen_plcTerm_list_union :
    (coq_Term, coq_Plc) prod list -> coq_EnvironmentM **)

fun mangen_plcTerm_list_union ls =
  env_list_union (manifest_generator_plcTerm_list ls)

(** val manifest_generator_plcEvidence_list :
    (coq_Evidence, coq_Plc) prod list -> coq_EnvironmentM list **)

fun manifest_generator_plcEvidence_list ls =
  map (fn pat =>
    let val Coq_pair et p = pat in manifest_generator_app et p end) ls

(** val mangen_plcEvidence_list_union :
    (coq_Evidence, coq_Plc) prod list -> coq_EnvironmentM **)

fun mangen_plcEvidence_list_union ls =
  env_list_union (manifest_generator_plcEvidence_list ls)

(** val end_to_end_mangen :
    (coq_Evidence, coq_Plc) prod list -> (coq_Term, coq_Plc) prod list ->
    coq_EnvironmentM **)

fun end_to_end_mangen ls ts =
  let val app_env = mangen_plcEvidence_list_union ls in
  let val att_env = mangen_plcTerm_list_union ts in
  environment_union app_env att_env end end

(** val end_to_end_mangen_final :
    (coq_Evidence, coq_Plc) prod list -> (coq_Term, coq_Plc) prod list ->
    coq_Manifest list **)

fun end_to_end_mangen_final ls ts =
  environment_to_manifest_list (end_to_end_mangen ls ts)
