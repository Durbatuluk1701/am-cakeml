type coq_CakeML_ASPCallback =
  coq_ASP_PARAMS -> coq_Plc -> coq_BS -> coq_RawEv -> coq_BS

type coq_CakeML_PubKeyCallback = coq_Plc -> coq_PublicKey

type coq_CakeML_PlcCallback = coq_Plc -> coq_UUID

type coq_CakeML_uuidCallback = coq_UUID -> coq_Plc

datatype coq_Manifest =
  Build_Manifest coq_Plc (coq_ASP_ID list) (coq_Plc list)
   (coq_PublicKey list) coq_PolicyT

datatype coq_AM_Library =
  Build_AM_Library ((coq_ASP_ID, coq_CakeML_ASPCallback) coq_MapC)
   ((coq_Plc, coq_UUID) coq_MapC) ((coq_Plc, coq_PublicKey) coq_MapC)
   ((coq_ASP_Address, coq_CakeML_ASPCallback) prod)
   ((coq_ASP_Address, coq_CakeML_PubKeyCallback) prod)
   ((coq_ASP_Address, coq_CakeML_PlcCallback) prod)
   ((coq_ASP_Address, coq_CakeML_uuidCallback) prod)

datatype coq_ConcreteManifest =
  Build_ConcreteManifest coq_Plc (coq_ASP_ID list) (coq_Plc list)
   (coq_PublicKey list) coq_ASP_Address coq_ASP_Address coq_ASP_Address

(** val generate_ASP_dispatcher : coq_AM_Library -> coq_CakeML_ASPCallback **)

fun generate_ASP_dispatcher al =
  let val local_asps_map =
    let val Build_AM_Library local_ASPS _ _ _ _ _ _ = al in local_ASPS end
  in
  (fn par =>
  let val Coq_pair _ asp_server_cb =
    let val Build_AM_Library _ _ _ lib_ASP_Server _ _ _ = al in
    lib_ASP_Server end
  in
  let val Coq_asp_paramsC aspid _ _ _ = par in
  (case map_get coq_Eq_Class_ID_Type local_asps_map aspid of
     Some cb => cb par
   | None => asp_server_cb par) end end) end

(** val generate_Plc_dispatcher : coq_AM_Library -> coq_CakeML_PlcCallback **)

fun generate_Plc_dispatcher al =
  let val local_plc_map =
    let val Build_AM_Library _ local_Plcs _ _ _ _ _ = al in local_Plcs end
  in
  (fn p =>
  let val Coq_pair _ plc_server_cb =
    let val Build_AM_Library _ _ _ _ _ lib_Plc_Server _ = al in
    lib_Plc_Server end
  in
  (case map_get coq_Eq_Class_ID_Type local_plc_map p of
     Some uuid => uuid
   | None => plc_server_cb p) end) end

(** val generate_PubKey_dispatcher :
    coq_AM_Library -> coq_CakeML_PubKeyCallback **)

fun generate_PubKey_dispatcher al =
  let val local_pubkey_map =
    let val Build_AM_Library _ _ local_PubKeys _ _ _ _ = al in
    local_PubKeys end
  in
  (fn p =>
  let val Coq_pair _ pubkey_server_cb =
    let val Build_AM_Library _ _ _ _ lib_PubKey_Server _ _ = al in
    lib_PubKey_Server end
  in
  (case map_get coq_Eq_Class_ID_Type local_pubkey_map p of
     Some key => key
   | None => pubkey_server_cb p) end) end

(** val generate_UUUID_dispatcher :
    coq_AM_Library -> coq_CakeML_uuidCallback **)

fun generate_UUUID_dispatcher al =
  let val local_uuid_map =
    invert_map coq_Eq_Class_ID_Type coq_Eq_Class_uuid
      (let val Build_AM_Library _ local_Plcs _ _ _ _ _ = al in local_Plcs end)
  in
  (fn u =>
  let val Coq_pair _ uuid_server_cb =
    let val Build_AM_Library _ _ _ _ _ _ lib_UUUID_Server = al in
    lib_UUUID_Server end
  in
  (case map_get coq_Eq_Class_uuid local_uuid_map u of
     Some p => p
   | None => uuid_server_cb u) end) end

(** val manifest_compiler :
    coq_Manifest -> coq_AM_Library -> ((((coq_ConcreteManifest,
    coq_CakeML_ASPCallback) prod, coq_CakeML_PlcCallback) prod,
    coq_CakeML_PubKeyCallback) prod, coq_CakeML_uuidCallback) prod **)

fun manifest_compiler m al =
  let val asp_cb = generate_ASP_dispatcher al in
  let val plc_cb = generate_Plc_dispatcher al in
  let val pubkey_cb = generate_PubKey_dispatcher al in
  let val uuid_cb = generate_UUUID_dispatcher al in
  let val concrete_man = Build_ConcreteManifest
    (let val Build_Manifest my_abstract_plc _ _ _ _ = m in my_abstract_plc end)
    (let val Build_Manifest _ asps _ _ _ = m in asps end)
    (let val Build_Manifest _ _ knowsOf _ _ = m in knowsOf end)
    (let val Build_Manifest _ _ _ pubkeys _ = m in pubkeys end)
    (fst
      (let val Build_AM_Library _ _ _ lib_ASP_Server _ _ _ = al in
       lib_ASP_Server end))
    (fst
      (let val Build_AM_Library _ _ _ _ _ lib_Plc_Server _ = al in
       lib_Plc_Server end))
    (fst
      (let val Build_AM_Library _ _ _ _ lib_PubKey_Server _ _ = al in
       lib_PubKey_Server end))
  in
  Coq_pair (Coq_pair (Coq_pair (Coq_pair concrete_man asp_cb) plc_cb)
  pubkey_cb) uuid_cb end end end end end
