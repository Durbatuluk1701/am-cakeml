type coq_ASP_Address (* AXIOM TO BE REALIZED *)

type coq_UUID (* AXIOM TO BE REALIZED *)

type coq_PublicKey (* AXIOM TO BE REALIZED *)

type coq_PolicyT (* AXIOM TO BE REALIZED *)

type coq_CakeML_ASPCallback =
  coq_ASP_PARAMS -> coq_Plc -> coq_BS -> coq_RawEv -> coq_BS

type coq_CakeML_PubKeyCallback = coq_Plc -> coq_PublicKey

type coq_CakeML_PlcCallback = coq_Plc -> coq_UUID

datatype coq_Manifest =
  Build_Manifest (coq_ASP_ID list) (coq_Plc list) (coq_PublicKey list)
   coq_PolicyT

datatype coq_AM_Library =
  Build_AM_Library ((coq_ASP_ID, coq_CakeML_ASPCallback) coq_MapC)
   ((coq_Plc, coq_UUID) coq_MapC) ((coq_Plc, coq_PublicKey) coq_MapC)
   ((coq_ASP_Address, coq_CakeML_ASPCallback) prod)
   ((coq_ASP_Address, coq_CakeML_PubKeyCallback) prod)
   ((coq_ASP_Address, coq_CakeML_PlcCallback) prod)

datatype coq_ConcreteManifest =
  Build_ConcreteManifest (coq_ASP_ID list) (coq_Plc list)
   (coq_PublicKey list) coq_ASP_Address coq_ASP_Address coq_ASP_Address

(** val generate_ASP_dispatcher : coq_AM_Library -> coq_CakeML_ASPCallback **)

fun generate_ASP_dispatcher al par =
  let val Build_AM_Library local_ASPS _ _ lib_ASP_Server _ _ = al in
  let val Coq_asp_paramsC a _ _ _ = par in
  let val o = map_get coq_Eq_Class_ID_Type local_ASPS a in
  (case o of
     Some a0 => a0 par
   | None => let val Coq_pair _ b = lib_ASP_Server in b par end) end end end

(** val generate_Plc_dispatcher : coq_AM_Library -> coq_CakeML_PlcCallback **)

fun generate_Plc_dispatcher al plc =
  let val Build_AM_Library _ local_Plcs _ _ _ lib_Plc_Server = al in
  let val o = map_get coq_Eq_Class_ID_Type local_Plcs plc in
  (case o of
     Some a => a
   | None => let val Coq_pair _ b = lib_Plc_Server in b plc end) end end

(** val generate_PubKey_dispatcher :
    coq_AM_Library -> coq_CakeML_PubKeyCallback **)

fun generate_PubKey_dispatcher al plc =
  let val Build_AM_Library _ _ local_PubKeys _ lib_PubKey_Server _ = al in
  let val o = map_get coq_Eq_Class_ID_Type local_PubKeys plc in
  (case o of
     Some a => a
   | None => let val Coq_pair _ b = lib_PubKey_Server in b plc end) end end

(** val manifest_compiler :
    coq_Manifest -> coq_AM_Library -> (((coq_ConcreteManifest,
    coq_CakeML_ASPCallback) prod, coq_CakeML_PlcCallback) prod,
    coq_CakeML_PubKeyCallback) prod **)

fun manifest_compiler m al =
  let val x = generate_ASP_dispatcher al in
  let val x0 = generate_Plc_dispatcher al in
  let val x1 = generate_PubKey_dispatcher al in
  Coq_pair (Coq_pair (Coq_pair (Build_ConcreteManifest
  (let val Build_Manifest asps _ _ _ = m in asps end)
  (let val Build_Manifest _ knowsOf _ _ = m in knowsOf end)
  (let val Build_Manifest _ _ pubkeys _ = m in pubkeys end)
  (fst
    (let val Build_AM_Library _ _ _ lib_ASP_Server _ _ = al in
     lib_ASP_Server end))
  (fst
    (let val Build_AM_Library _ _ _ _ _ lib_Plc_Server = al in
     lib_Plc_Server end))
  (fst
    (let val Build_AM_Library _ _ _ _ lib_PubKey_Server _ = al in
     lib_PubKey_Server end))) x) x0) x1 end end end
