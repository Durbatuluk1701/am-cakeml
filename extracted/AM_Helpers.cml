(** val aspid_in_amlib_bool :
    coq_AM_Library -> coq_ASP_ID -> bool **)

fun aspid_in_amlib_bool al i =
  case map_get coq_Eq_Class_ID_Type
         (let val Build_AM_Library _ _ _ _ _ _ _ _ _ local_ASPS _ _
            _ = al
          in
          local_ASPS end) i of
    Some _ => True
  | None => False

(** val uuid_plc_in_amlib_bool : coq_AM_Library -> coq_Plc -> bool **)

fun uuid_plc_in_amlib_bool al p =
  case map_get coq_Eq_Class_ID_Type
         (let val Build_AM_Library _ _ _ _ _ _ _ _ _ _ _ local_Plcs
            _ = al
          in
          local_Plcs end) p of
    Some _ => True
  | None => False

(** val pubkey_plc_in_amlib_bool :
    coq_AM_Library -> coq_Plc -> bool **)

fun pubkey_plc_in_amlib_bool al p =
  case map_get coq_Eq_Class_ID_Type
         (let val Build_AM_Library _ _ _ _ _ _ _ _ _ _ _ _
            local_PubKeys = al
          in
          local_PubKeys end) p of
    Some _ => True
  | None => False

(** val appraisal_aspid_in_amlib_bool :
    coq_AM_Library -> (coq_Plc, coq_ASP_ID) prod -> bool **)

fun appraisal_aspid_in_amlib_bool al pr =
  case map_get
         (pair_EqClass coq_Eq_Class_ID_Type coq_Eq_Class_ID_Type)
         (let val Build_AM_Library _ _ _ _ _ _ _ _ _ _
            local_Appraisal_ASPS _ _ = al
          in
          local_Appraisal_ASPS end) pr of
    Some _ => True
  | None => False

(** val lib_omits_aspids :
    coq_ASP_ID manifest_set -> coq_AM_Library -> coq_ASP_ID
    manifest_set **)

fun lib_omits_aspids ls al =
  filter_manset (fn i => negb (aspid_in_amlib_bool al i)) ls

(** val lib_omits_uuid_plcs :
    coq_Plc manifest_set -> coq_AM_Library -> coq_Plc manifest_set **)

fun lib_omits_uuid_plcs ls al =
  filter_manset (fn p => negb (uuid_plc_in_amlib_bool al p)) ls

(** val lib_omits_pubkey_plcs :
    coq_Plc manifest_set -> coq_AM_Library -> coq_Plc manifest_set **)

fun lib_omits_pubkey_plcs ls al =
  filter_manset (fn p => negb (pubkey_plc_in_amlib_bool al p)) ls

(** val lib_omits_appraisal_aspids :
    (coq_Plc, coq_ASP_ID) prod manifest_set -> coq_AM_Library ->
    (coq_Plc, coq_ASP_ID) prod manifest_set **)

fun lib_omits_appraisal_aspids ls al =
  filter_manset (fn i => negb (appraisal_aspid_in_amlib_bool al i)) ls

(** val lib_omits_manifest :
    coq_AM_Library -> coq_Manifest -> coq_Manifest **)

fun lib_omits_manifest al am =
  let val aspid_list =
    let val Build_Manifest _ asps _ _ _ _ _ = am in asps end
  in
  let val uuid_plcs_list =
    let val Build_Manifest _ _ _ uuidPlcs _ _ _ = am in uuidPlcs end
  in
  let val pubkey_plcs_list =
    let val Build_Manifest _ _ _ _ pubKeyPlcs _ _ = am in
    pubKeyPlcs end
  in
  let val appraisal_asps_list =
    let val Build_Manifest _ _ appraisal_asps _ _ _ _ = am in
    appraisal_asps end
  in
  Build_Manifest
  (let val Build_Manifest my_abstract_plc _ _ _ _ _ _ = am in
   my_abstract_plc end) (lib_omits_aspids aspid_list al)
  (lib_omits_appraisal_aspids appraisal_asps_list al)
  (lib_omits_uuid_plcs uuid_plcs_list al)
  (lib_omits_pubkey_plcs pubkey_plcs_list al) manifest_set_empty
  empty_PolicyT end end end end

(** val manifest_none_omitted : coq_Manifest -> bool **)

fun manifest_none_omitted m =
  let val Build_Manifest _ asps app_asps uuids pubkeys _ _ = m in
  (case case case is_empty_manset asps of
               True => is_empty_manset app_asps
             | False => False of
          True => is_empty_manset uuids
        | False => False of
     True => is_empty_manset pubkeys
   | False => False) end

(** val config_AM_if_lib_supported :
    coq_Manifest -> coq_AM_Library -> unit coq_AM **)

fun config_AM_if_lib_supported absMan amLib =
  let val om = lib_omits_manifest amLib absMan in
  let val supportsB = manifest_none_omitted om in
  (case supportsB of
     True =>
     let val amConf = manifest_compiler absMan amLib in
     put_amConfig amConf end
   | False =>
     am_failm (Coq_am_dispatch_error (Runtime
       (pretty_print_manifest om)))) end end
