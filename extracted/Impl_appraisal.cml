(** val peel_bs_am : coq_RawEv -> (coq_BS, coq_RawEv) prod coq_AM **)

fun peel_bs_am ls = case ls of
  [] => am_failm (Coq_am_error errStr_peel_bs_am)
| bs :: ls' => ret (Coq_pair bs ls')

(** val gen_appraise_AM :
    coq_Evidence -> coq_RawEv -> coq_AppResultC coq_AM **)

fun gen_appraise_AM et ls =
  case et of
    Coq_mt => ret Coq_mtc_app
  | Coq_nn nid =>
    bind (peel_bs_am ls) (fn v =>
      let val Coq_pair bs _ = v in
      bind (checkNonce' nid bs) (fn res => ret (Coq_nnc_app nid res)) end)
  | Coq_uu p fwd params et' =>
    (case fwd of
       ENCR =>
       bind (peel_bs_am ls) (fn v =>
         let val Coq_pair bs _ = v in
         bind (decrypt_bs_to_rawev' bs params et')
           (fn decrypted_ls =>
           bind (gen_appraise_AM et' decrypted_ls) (fn rest =>
             ret (Coq_eec_app p params passed_bs rest))) end)
     | EXTD =>
       bind (peel_bs_am ls) (fn v =>
         let val Coq_pair bs ls' = v in
         bind (check_asp_EXTD' params p bs ls') (fn v0 =>
           bind (gen_appraise_AM et' ls') (fn rest =>
             ret (Coq_ggc_app p params v0 rest))) end)
     | KEEP => gen_appraise_AM et' ls
     | _ => ret Coq_mtc_app)
  | Coq_ss et1 et2 =>
    bind (gen_appraise_AM et1 (firstn (et_size et1) ls)) (fn x =>
      bind (gen_appraise_AM et2 (skipn (et_size et1) ls)) (fn y =>
        ret (Coq_ssc_app x y)))
