(** val peel_bs_am : coq_RawEv -> (coq_BS * coq_RawEv) coq_AM **)

fun peel_bs_am ls = case ls of
  [] => am_failm (Coq_am_error errStr_peel_bs_am)
| bs :: ls' => err_ret (bs, ls')

(** val peel_n_am : nat -> coq_RawEv -> (coq_RawEv * coq_RawEv) coq_AM **)

fun peel_n_am n ls =
  case n of
    O => err_ret ([], ls)
  | S n' =>
    (case ls of
       [] => am_failm (Coq_am_error errStr_peel_n_am)
     | x :: ls' =>
       err_bind (peel_n_am n' ls') (fn v =>
         let val (ls1, ls2) = v in err_ret ((x :: ls1), ls2) end))

(** val gen_appraise_AM :
    coq_Evidence -> coq_RawEv -> coq_AppResultC coq_AM **)

fun gen_appraise_AM et ls =
  case et of
    Coq_mt => err_ret Coq_mtc_app
  | Coq_nn nid =>
    err_bind (peel_bs_am ls) (fn v =>
      let val (bs, _) = v in
      err_bind (checkNonce' nid bs) (fn res => err_ret (Coq_nnc_app nid res)) end)
  | Coq_uu p fwd params et' =>
    (case fwd of
       ENCR =>
       err_bind (peel_bs_am ls) (fn v =>
         let val (bs, _) = v in
         err_bind (decrypt_bs_to_rawev' bs params et') (fn decrypted_ls =>
           err_bind (gen_appraise_AM et' decrypted_ls) (fn rest =>
             err_ret (Coq_eec_app p params passed_bs rest))) end)
     | EXTD n =>
       err_bind (peel_n_am n ls) (fn v =>
         let val (rawEv, ls') = v in
         err_bind (check_asp_EXTD' params p rawEv ls') (fn v0 =>
           err_bind (gen_appraise_AM et' ls') (fn rest =>
             err_ret (Coq_ggc_app p params v0 rest))) end)
     | KEEP => gen_appraise_AM et' ls
     | _ => err_ret Coq_mtc_app)
  | Coq_ss et1 et2 =>
    err_bind (gen_appraise_AM et1 (firstn (et_size et1) ls)) (fn x =>
      err_bind (gen_appraise_AM et2 (skipn (et_size et1) ls)) (fn y =>
        err_ret (Coq_ssc_app x y)))
