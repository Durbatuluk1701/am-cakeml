(** val am_sendReq :
    coq_Plc -> coq_Attestation_Session -> coq_Term -> coq_UUID -> coq_RawEv
    -> (coq_RawEv, string) coq_ResultT **)

fun am_sendReq req_plc att_sess t uuid e =
  let val req = Coq_mkPRReq att_sess t req_plc e in
  let val js =
    let val Build_Jsonifiable to_JSON _ =
      coq_Jsonifiable_ProtocolRunRequest coq_Jsonifiable_Term
        coq_Jsonifiable_RawEv
        (coq_Jsonifiable_Attestation_Session
          (jsonifiable_map_serial_serial coq_Stringifiable_ID_Type
            coq_Eq_Class_ID_Type coq_Stringifiable_UUUID)
          (jsonifiable_map_serial_serial coq_Stringifiable_ID_Type
            coq_Eq_Class_ID_Type coq_Stringifiable_PublicKey))
    in
    to_JSON req end
  in
  let val resp_res = make_JSON_Network_Request uuid js in
  (case resp_res of
     Coq_errC msg => Coq_errC msg
   | Coq_resultC js_res =>
     (case let val Build_Jsonifiable _ from_JSON =
             coq_Jsonifiable_ProtocolRunResponse coq_Jsonifiable_RawEv
           in
           from_JSON js_res end of
        Coq_errC msg => Coq_errC msg
      | Coq_resultC res =>
        let val Coq_mkPRResp success ev = res in
        (case success of
           True => Coq_resultC ev
         | False => Coq_errC errStr_remote_am_failure) end)) end end end

(** val am_sendReq_app :
    coq_UUID -> coq_Attestation_Session -> coq_Term -> coq_Plc ->
    coq_Evidence -> coq_RawEv -> (coq_AppResultC, string) coq_ResultT **)

fun am_sendReq_app uuid att_sess t p e ev =
  let val req = Coq_mkPAReq att_sess t p e ev in
  let val js =
    let val Build_Jsonifiable to_JSON _ =
      coq_Jsonifiable_ProtocolAppraiseRequest coq_Jsonifiable_Term
        coq_Jsonifiable_RawEv coq_Jsonifiable_Evidence
        (coq_Jsonifiable_Attestation_Session
          (jsonifiable_map_serial_serial coq_Stringifiable_ID_Type
            coq_Eq_Class_ID_Type coq_Stringifiable_UUUID)
          (jsonifiable_map_serial_serial coq_Stringifiable_ID_Type
            coq_Eq_Class_ID_Type coq_Stringifiable_PublicKey))
    in
    to_JSON req end
  in
  let val resp_res = make_JSON_Network_Request uuid js in
  (case resp_res of
     Coq_errC msg => Coq_errC msg
   | Coq_resultC js_res =>
     (case let val Build_Jsonifiable _ from_JSON =
             coq_Jsonifiable_ProtocolAppraiseResponse
               (coq_Jsonifiable_AppResultC
                 (jsonifiable_map_serial_serial coq_Stringifiable_ID_Type
                   coq_Eq_Class_ID_Type coq_Stringifiable_ID_Type))
           in
           from_JSON js_res end of
        Coq_errC msg => Coq_errC msg
      | Coq_resultC res =>
        let val Coq_mkPAResp success result = res in
        (case success of
           True => Coq_resultC result
         | False => Coq_errC errStr_remote_am_failure) end)) end end end

(** val run_appraisal_client :
    coq_Attestation_Session -> coq_Term -> coq_Plc -> coq_Evidence ->
    coq_RawEv -> coq_UUID -> (coq_AppResultC, string) coq_ResultT **)

fun run_appraisal_client att_sess t p et re addr =
  am_sendReq_app addr att_sess t p et re

(** val run_demo_client_AM :
    coq_Term -> coq_Plc -> coq_Plc -> coq_Evidence -> coq_Attestation_Session
    -> coq_RawEv -> coq_UUID -> coq_UUID -> (coq_AppResultC, string)
    coq_ResultT **)

fun run_demo_client_AM t top_plc att_plc et att_sess re attester_addr appraiser_addr =
  let val att_result = am_sendReq top_plc att_sess t attester_addr re in
  (case att_result of
     Coq_errC msg => Coq_errC msg
   | Coq_resultC att_rawev =>
     run_appraisal_client att_sess t att_plc et att_rawev appraiser_addr) end
