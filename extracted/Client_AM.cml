(** val am_sendReq_app :
    coq_UUID -> coq_Term -> coq_Plc -> coq_Evidence -> coq_RawEv ->
    (coq_AppResultC, coq_StringT) coq_ResultT **)

fun am_sendReq_app uuid t p e ev =
  let val req = Coq_mkPAReq t p e ev in
  let val js = coq_ProtocolAppraiseRequest_to_JSON req in
  let val js_res = make_JSON_Network_Request uuid js in
  (case coq_JSON_to_ProtocolAppraiseResponse js_res of
     Coq_errC msg => Coq_errC msg
   | Coq_resultC res =>
     let val Coq_mkPAResp success result = res in
     (case success of
        True => Coq_resultC result
      | False => Coq_errC errStr_remote_am_failure) end) end end end

(** val gen_nonce_if_none_local : coq_EvC option -> coq_EvC coq_AM **)

fun gen_nonce_if_none_local initEv = case initEv of
  Some _ => ret mt_evc
| None =>
  bind (am_newNonce gen_nonce_bits) (fn nid =>
    ret (Coq_evc (gen_nonce_bits :: []) (Coq_nn nid)))

(** val run_appraisal_client :
    coq_Term -> coq_Plc -> coq_Evidence -> coq_RawEv -> coq_UUID ->
    (coq_AppResultC, coq_StringT) coq_ResultT **)

fun run_appraisal_client t p et re addr =
  am_sendReq_app addr t p et re

(** val get_am_clone_uuid : coq_UUID coq_AM **)

val get_am_clone_uuid =
  bind get_AM_amConfig (fn ac =>
    ret
      (let val Coq_mkAmConfig _ am_clone_addr _ _ _ _ = ac in
       am_clone_addr end))

(** val check_et_length : coq_Evidence -> coq_RawEv -> unit coq_AM **)

fun check_et_length et ls =
  case eqb nat_EqClass (et_size et) (length ls) of
    True => ret ()
  | False => am_failm (Coq_am_dispatch_error (Runtime errStr_et_size))

(** val am_appraise :
    coq_Term -> coq_Plc -> coq_Evidence -> coq_RawEv -> bool ->
    coq_AppResultC coq_AM **)

fun am_appraise t toPlc init_et cvm_ev local_appraisal =
  let val expected_et = eval t toPlc init_et in
  bind (check_et_length expected_et cvm_ev) (fn _ =>
    bind get_am_clone_uuid (fn uuid =>
      bind
        (case local_appraisal of
           True =>
           let val expected_et0 = eval t toPlc init_et in
           gen_appraise_AM expected_et0 cvm_ev end
         | False =>
           (case run_appraisal_client t toPlc init_et cvm_ev uuid of
              Coq_errC msg => am_failm (Coq_am_dispatch_error (Runtime msg))
            | Coq_resultC res => ret res)) ret)) end

(** val run_cvm_local_am : coq_Term -> coq_RawEv -> coq_RawEv coq_AM **)

fun run_cvm_local_am t ls =
  bind get (fn st =>
    ret
      (run_cvm_rawEv t ls
        (let val Coq_mkAM_St _ _ amConfig = st in amConfig end)))

(** val get_am_policy : coq_PolicyT coq_AM **)

val get_am_policy =
  bind get (fn st =>
    ret
      (let val Build_Manifest _ _ _ _ _ _ policy =
         let val Coq_mkAmConfig absMan _ _ _ _ _ =
           let val Coq_mkAM_St _ _ amConfig = st in amConfig end
         in
         absMan end
       in
       policy end))

(** val check_disclosure_policy :
    coq_Term -> coq_Plc -> coq_Evidence -> unit coq_AM **)

fun check_disclosure_policy t p e =
  bind get_am_policy (fn policy =>
    case policy_list_not_disclosed t p e policy of
      True => ret ()
    | False =>
      am_failm (Coq_am_dispatch_error (Runtime errStr_disclosePolicy)))

(** val am_client_gen_local :
    coq_Term -> coq_Plc -> coq_EvC option -> coq_Manifest -> coq_AM_Library
    -> coq_AM_Result coq_AM **)

fun am_client_gen_local t myPlc initEvOpt absMan amLib =
  bind (gen_nonce_if_none_local initEvOpt) (fn evcIn =>
    let val Coq_evc init_ev init_et = evcIn in
    bind (config_AM_if_lib_supported absMan amLib) (fn _ =>
      bind (check_disclosure_policy t myPlc init_et) (fn _ =>
        bind (run_cvm_local_am t init_ev) (fn resev =>
          bind (am_appraise t myPlc init_et resev (is_local_appraisal amLib))
            (fn app_res => ret (Coq_am_appev app_res))))) end)
