(** val gen_nonce_if_none : coq_EvC option -> coq_EvC coq_AM **)

fun gen_nonce_if_none initEv = case initEv of
  Some e => ret e
| None =>
  bind (am_newNonce gen_nonce_bits) (fn nid =>
    ret (Coq_evc (gen_nonce_bits :: []) (Coq_nn nid)))

(** val gen_authEvC_if_some :
    coq_Term option -> coq_Plc -> coq_EvC -> coq_EvC coq_AM **)

fun gen_authEvC_if_some ot myPlc init_evc =
  case ot of
    Some auth_phrase =>
    let val Coq_evc init_rawev_auth init_et_auth = init_evc in
    let val auth_rawev = am_sendReq auth_phrase myPlc mt_evc init_rawev_auth
    in
    let val auth_et = eval auth_phrase myPlc init_et_auth in
    ret (Coq_evc auth_rawev auth_et) end end end
  | None => ret (Coq_evc [] Coq_mt)

(** val am_appraise :
    coq_Term -> coq_Plc -> coq_Evidence -> coq_RawEv -> coq_AppResultC coq_AM **)

fun am_appraise t toPlc init_et cvm_ev =
  let val expected_et = eval t toPlc init_et in
  bind (gen_appraise_AM expected_et cvm_ev) ret end

(** val am_client_gen :
    coq_Term -> coq_Plc -> coq_Plc -> coq_EvC option -> coq_Term option ->
    bool -> coq_AM_Result coq_AM **)

fun am_client_gen t myPlc pTo initEvOpt authPhrase app_bool =
  bind (gen_nonce_if_none initEvOpt) (fn evcIn =>
    bind (gen_authEvC_if_some authPhrase myPlc mt_evc) (fn auth_evc =>
      let val Coq_evc init_ev init_et = evcIn in
      let val resev = am_sendReq t pTo auth_evc init_ev in
      (case app_bool of
         True =>
         bind (am_appraise t pTo init_et resev) (fn app_res =>
           ret (Coq_am_appev app_res))
       | False => ret (Coq_am_rawev resev)) end end))

(** val am_client_auth :
    coq_Term -> coq_Plc -> coq_Plc -> coq_Term -> bool -> bool ->
    coq_AM_Result coq_AM **)

fun am_client_auth t myPlc pTo authPhrase nonceB appraiseB =
  let val init_evc_opt = case nonceB of
                           True => None
                         | False => Some mt_evc in
  am_client_gen t myPlc pTo init_evc_opt (Some authPhrase) appraiseB end
