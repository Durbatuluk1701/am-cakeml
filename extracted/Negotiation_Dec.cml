type coq_Environment = (coq_Plc, coq_Manifest) coq_MapC

(** val e_empty : coq_Environment **)

val e_empty =
  []

(** val aspid_manifest_update : coq_ASP_ID -> coq_Manifest -> coq_Manifest **)

fun aspid_manifest_update i m =
  let val Build_Manifest oldPlc oldasps oldKnowsOf oldContext oldPolicy = m in
  Build_Manifest oldPlc (i :: oldasps) oldKnowsOf oldContext oldPolicy end

(** val knowsof_manifest_update : coq_Plc -> coq_Manifest -> coq_Manifest **)

fun knowsof_manifest_update toPlc m =
  let val Build_Manifest oldPlc oldasps oldKnowsOf oldContext oldPolicy = m in
  Build_Manifest oldPlc oldasps (toPlc :: oldKnowsOf) oldContext oldPolicy end

(** val myPlc_manifest_update : coq_Plc -> coq_Manifest -> coq_Manifest **)

fun myPlc_manifest_update p m =
  let val Build_Manifest _ oldasps oldKnowsOf oldContext oldPolicy = m in
  Build_Manifest p oldasps oldKnowsOf oldContext oldPolicy end

(** val asp_manifest_update : coq_ASP -> coq_Manifest -> coq_Manifest **)

fun asp_manifest_update a m =
  case a of
    ASPC _ _ params =>
    let val Coq_asp_paramsC i _ _ _ = params in aspid_manifest_update i m end
  | _ => m

(** val asp_manifest_generator :
    coq_ASP -> coq_Plc -> coq_Environment -> coq_Environment **)

fun asp_manifest_generator a p e =
  case map_get coq_Eq_Class_ID_Type e p of
    Some m =>
    let val m' = asp_manifest_update a m in
    map_set coq_Eq_Class_ID_Type e p m' end
  | None =>
    let val m' = asp_manifest_update a empty_Manifest in
    map_set coq_Eq_Class_ID_Type e p m' end

(** val plc_manifest_generator :
    coq_Plc -> coq_Plc -> coq_Environment -> coq_Environment **)

fun plc_manifest_generator fromPlc toPlc e =
  case map_get coq_Eq_Class_ID_Type e fromPlc of
    Some m =>
    let val m' = knowsof_manifest_update toPlc m in
    map_set coq_Eq_Class_ID_Type e fromPlc m' end
  | None =>
    let val m' = knowsof_manifest_update toPlc empty_Manifest in
    map_set coq_Eq_Class_ID_Type e fromPlc m' end

(** val manifest_generator' :
    coq_Term -> coq_Plc -> coq_Environment -> coq_Environment **)

fun manifest_generator' t p e =
  case t of
    Coq_asp a => asp_manifest_generator a p e
  | Coq_att q t' =>
    let val e' = plc_manifest_generator p q e in
    manifest_generator' t' q e' end
  | Coq_lseq t1 t2 => manifest_generator' t2 p (manifest_generator' t1 p e)
  | Coq_bseq _ t1 t2 => manifest_generator' t2 p (manifest_generator' t1 p e)
  | Coq_bpar _ t1 t2 => manifest_generator' t2 p (manifest_generator' t1 p e)

(** val manifest_generator : coq_Term -> coq_Plc -> coq_Environment **)

fun manifest_generator t p =
  manifest_generator' t p e_empty

(** val places' : coq_Term -> coq_Plc list -> coq_Plc list **)

fun places' t ls =
  case t of
    Coq_asp _ => ls
  | Coq_att q t' => q :: (places' t' ls)
  | Coq_lseq t1 t2 => places' t2 (places' t1 ls)
  | Coq_bseq _ t1 t2 => places' t2 (places' t1 ls)
  | Coq_bpar _ t1 t2 => places' t2 (places' t1 ls)

(** val places : coq_Term -> coq_Plc -> coq_Plc list **)

fun places t p =
  p :: (places' t [])

(** val fromSome : 'a1 option -> 'a1 -> 'a1 **)

fun fromSome v a =
  case v of
    Some v' => v'
  | None => a

(** val get_manifest_env_default :
    coq_Environment -> coq_Plc -> coq_Manifest **)

fun get_manifest_env_default e p =
  let val m' = fromSome (map_get coq_Eq_Class_ID_Type e p) empty_Manifest in
  myPlc_manifest_update p m' end

(** val get_unique_manifests_env' :
    coq_Plc list -> coq_Environment -> coq_Manifest list **)

fun get_unique_manifests_env' ps e =
  map (get_manifest_env_default e) ps

(** val get_unique_manifests_env :
    coq_Term -> coq_Plc -> coq_Environment -> coq_Manifest list **)

fun get_unique_manifests_env t p e =
  let val ps = places t p in get_unique_manifests_env' ps e end

(** val man_gen_run : coq_Environment **)

val man_gen_run =
  manifest_generator cert_style_test coq_P0

(** val environment_to_manifest_list :
    coq_Environment -> coq_Manifest list **)

fun environment_to_manifest_list e =
  map_vals coq_Eq_Class_ID_Type e

(** val example_man_gen_run : coq_Manifest list **)

val example_man_gen_run =
  get_unique_manifests_env cert_style_test coq_P0 man_gen_run

(** val man_gen_res : coq_Manifest **)

val man_gen_res =
  fromSome (map_get coq_Eq_Class_ID_Type man_gen_run coq_P1) empty_Manifest
