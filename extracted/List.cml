(** val in_dec : ('a1 -> 'a1 -> sumbool) -> 'a1 -> 'a1 list -> sumbool **)

fun in_dec h a l = case l of
  [] => Coq_right
| y :: l0 =>
  let val s = h y a in
  (case s of
     Coq_left => Coq_left
   | Coq_right => in_dec h a l0) end

(** val map : ('a1 -> 'a2) -> 'a1 list -> 'a2 list **)

fun map f l = case l of
  [] => []
| a :: t => (f a) :: (map f t)

(** val fold_right : ('a2 -> 'a1 -> 'a1) -> 'a1 -> 'a2 list -> 'a1 **)

fun fold_right f a0 l = case l of
  [] => a0
| b :: t => f b (fold_right f a0 t)

(** val forallb : ('a1 -> bool) -> 'a1 list -> bool **)

fun forallb f l = case l of
  [] => True
| a :: l0 => (case f a of
                True => forallb f l0
              | False => False)

(** val filter : ('a1 -> bool) -> 'a1 list -> 'a1 list **)

fun filter f l = case l of
  [] => []
| x :: l0 => (case f x of
                True => x :: (filter f l0)
              | False => filter f l0)

(** val firstn : nat -> 'a1 list -> 'a1 list **)

fun firstn n l =
  case n of
    O => []
  | S n0 => (case l of
               [] => []
             | a :: l0 => a :: (firstn n0 l0))

(** val skipn : nat -> 'a1 list -> 'a1 list **)

fun skipn n l =
  case n of
    O => l
  | S n0 => (case l of
               [] => []
             | _ :: l0 => skipn n0 l0)
