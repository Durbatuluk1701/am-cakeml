(** val am_check_auth_tok :
    coq_Term -> coq_Plc -> coq_ReqAuthTok -> coq_AppResultC coq_AM **)

fun am_check_auth_tok t fromPl authTok = case authTok of
  Coq_evc auth_ev auth_et =>
  bind
    (case requester_bound t fromPl authTok of
       True => gen_appraise_AM auth_et auth_ev
     | False => failm) ret

(** val am_serve_auth_tok_req :
    coq_Term -> coq_Plc -> coq_Plc -> coq_ReqAuthTok -> coq_RawEv ->
    coq_RawEv coq_AM **)

fun am_serve_auth_tok_req t fromPl myPl authTok init_ev =
  bind (am_check_auth_tok t fromPl authTok) (fn v =>
    case case requester_bound t fromPl authTok of
           True => appraise_auth_tok v
         | False => False of
      True =>
      (case privPolicy coq_Eq_Class_ID_Type fromPl t of
         True => ret (run_cvm_rawEv t myPl init_ev)
       | False => failm)
    | False => failm)

(** val run_am_server_auth_tok_req :
    coq_Term -> coq_Plc -> coq_Plc -> coq_ReqAuthTok -> coq_RawEv -> coq_RawEv **)

fun run_am_server_auth_tok_req t fromPlc myPl authTok init_ev =
  run_am_app_comp (am_serve_auth_tok_req t fromPlc myPl authTok init_ev) []

(** val do_cvm_session : coq_CvmRequestMessage -> coq_CvmResponseMessage **)

fun do_cvm_session req = case req of
  REQ t tok ev =>
  run_am_server_auth_tok_req t default_place default_place tok ev

(** val do_appraisal_session :
    coq_AppraisalRequestMessage -> coq_AppraisalResponseMessage **)

fun do_appraisal_session appreq = case appreq of
  REQ_APP t p et ev =>
  let val expected_et = eval t p et in
  let val comp = gen_appraise_AM expected_et ev in
  run_am_app_comp comp Coq_mtc_app end end

(** val evalJson : coq_StringT -> coq_JsonT **)

fun evalJson s =
  let val js = strToJson s in
  let val am_req = jsonToAmRequest js in
  (case am_req of
     CVM_REQ r =>
     let val cvm_resp = do_cvm_session r in responseToJson cvm_resp end
   | APP_REQ appreq =>
     let val app_resp = do_appraisal_session appreq in
     appResponseToJson app_resp end) end end

(** val am_client_auth_tok_req :
    coq_Term -> coq_Plc -> coq_RawEv -> bool -> coq_AM_Result coq_AM **)

fun am_client_auth_tok_req t myPl init_ev app_bool =
  let val att_res = am_sendReq t myPl mt_evc init_ev in
  (case app_bool of
     True =>
     let val app_res = am_sendReq_app t myPl Coq_mt att_res in
     ret (Coq_am_appev app_res) end
   | False => ret (Coq_am_rawev att_res)) end
