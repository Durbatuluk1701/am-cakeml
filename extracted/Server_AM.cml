(** val am_check_auth_tok :
    coq_Term -> coq_Plc -> coq_ReqAuthTok -> coq_AppResultC coq_AM **)

fun am_check_auth_tok t fromPl authTok = case authTok of
  Coq_evc auth_ev auth_et =>
  bind
    (case requester_bound t fromPl authTok of
       True => gen_appraise_AM auth_et auth_ev
     | False => failm) ret

(** val am_serve_auth_tok_req :
    coq_Term -> coq_Plc -> coq_Plc -> coq_ReqAuthTok -> coq_RawEv ->
    coq_RawEv coq_AM **)

fun am_serve_auth_tok_req t fromPl _ authTok init_ev =
  bind (am_check_auth_tok t fromPl authTok) (fn v =>
    case case requester_bound t fromPl authTok of
           True => appraise_auth_tok v
         | False => False of
      True =>
      (case privPolicy coq_Eq_Class_ID_Type fromPl t of
         True => ret (run_cvm_json_full t init_ev)
       | False => failm)
    | False => failm)

(** val run_am_server_auth_tok_req :
    coq_Term -> coq_Plc -> coq_Plc -> coq_ReqAuthTok -> coq_RawEv -> coq_RawEv **)

fun run_am_server_auth_tok_req t fromPlc myPl authTok init_ev =
  run_am_app_comp (am_serve_auth_tok_req t fromPlc myPl authTok init_ev) []

(** val evalJson : coq_StringT -> coq_JsonT **)

fun evalJson s =
  let val js = strToJson s in
  let val req = jsonToRequest js in
  let val REQ t tok ev = req in
  let val resev =
    run_am_server_auth_tok_req t default_place default_place tok ev
  in
  responseToJson resev end end end end

(** val am_client_auth_tok_req :
    coq_Term -> coq_Plc -> coq_RawEv -> bool -> coq_AM_Result coq_AM **)

fun am_client_auth_tok_req t myPl init_ev app_bool =
  let val att_res = am_sendReq t myPl mt_evc init_ev in
  (case app_bool of
     True =>
     let val att_et = eval t myPl Coq_mt in
     bind (gen_appraise_AM att_et att_res) (fn app_res =>
       ret (Coq_am_appev app_res)) end
   | False => ret (Coq_am_rawev att_res)) end
