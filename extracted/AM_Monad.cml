(** val am_error_to_string : coq_AM_Error -> string **)

fun am_error_to_string err = case err of
  Coq_cvm_error _ => errStr_cvm_error
| Coq_am_error s => s
| Coq_am_dispatch_error _ => errStr_dispatch_error

(** val run_am_app_comp_init :
    'a1 coq_AM -> coq_AM_St -> ('a1, string) coq_ResultT **)

fun run_am_app_comp_init am_comp st =
  case fst (am_comp st) of
    Coq_errC e => Coq_errC (am_error_to_string e)
  | Coq_resultC x => Coq_resultC x

(** val get_AM_config : coq_Session_Config coq_AM **)

val get_AM_config : coq_Session_Config coq_AM =
  err_bind err_get (fn st =>
    err_ret (let val Coq_mkAM_St _ _ am_config = st in am_config end))

(** val am_getNonce : nat -> coq_BS coq_AM **)

fun am_getNonce nid =
  err_bind err_get (fn oldSt =>
    let val oldMap =
      let val Coq_mkAM_St am_nonceMap _ _ = oldSt in am_nonceMap end
    in
    let val resopt = map_get nat_EqClass oldMap nid in
    (case resopt of
       Some res => err_ret res
     | None => am_failm (Coq_am_error errStr_amNonce)) end end)
