(** val fromSome : 'a1 -> ('a1, 'a2) coq_ResultT -> 'a1 **)

fun fromSome default opt = case opt of
  Coq_errC _ => default
| Coq_resultC x => x

(** val run_am_app_comp : 'a1 coq_AM -> 'a1 -> bool -> 'a1 **)

fun run_am_app_comp am_comp default_A b = case b of
  True =>
  let val optRes = evalErr am_comp empty_amst in
  let val v =
    case optRes of
      Coq_errC e => print_am_error e b
    | Coq_resultC _ => negb b
  in
  (case v of
     True => default_A
   | False => fromSome default_A optRes) end end
| False => default_A

(** val run_am_app_comp_init :
    'a1 coq_AM -> coq_AM_St -> 'a1 -> bool -> 'a1 **)

fun run_am_app_comp_init am_comp st default_A b = case b of
  True =>
  let val optRes = evalErr am_comp st in
  let val v =
    case optRes of
      Coq_errC e => print_am_error e b
    | Coq_resultC _ => negb b
  in
  (case v of
     True => default_A
   | False => fromSome default_A optRes) end end
| False => default_A

(** val get_AM_amConfig : coq_AM_Config coq_AM **)

val get_AM_amConfig =
  (bind get (fn st =>
    ret (let val Coq_mkAM_St _ _ amConfig = st in amConfig end))) : coq_AM_Config coq_AM

(** val put_amConfig : coq_AM_Config -> unit coq_AM **)

fun put_amConfig ac =
  bind get (fn oldSt =>
    let val oldMap =
      let val Coq_mkAM_St am_nonceMap _ _ = oldSt in am_nonceMap end
    in
    let val oldId =
      let val Coq_mkAM_St _ am_nonceId _ = oldSt in am_nonceId end
    in
    put (Coq_mkAM_St oldMap oldId ac) end end)

(** val am_newNonce : coq_BS -> nat coq_AM **)

fun am_newNonce bs =
  bind get (fn oldSt =>
    let val oldMap =
      let val Coq_mkAM_St am_nonceMap _ _ = oldSt in am_nonceMap end
    in
    let val oldId =
      let val Coq_mkAM_St _ am_nonceId _ = oldSt in am_nonceId end
    in
    let val oldAMConfig =
      let val Coq_mkAM_St _ _ amConfig = oldSt in amConfig end
    in
    let val newMap = map_set nat_EqClass oldMap oldId bs in
    let val newId = add oldId (S O) in
    bind (put (Coq_mkAM_St newMap newId oldAMConfig)) (fn _ => ret oldId) end end end end end)

(** val am_getNonce : nat -> coq_BS coq_AM **)

fun am_getNonce nid =
  bind get (fn oldSt =>
    let val oldMap =
      let val Coq_mkAM_St am_nonceMap _ _ = oldSt in am_nonceMap end
    in
    let val resopt = map_get nat_EqClass oldMap nid in
    (case resopt of
       Some res => ret res
     | None => am_failm (Coq_am_error errStr_amNonce)) end end)
