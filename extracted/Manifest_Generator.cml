(** val aspid_manifest_update :
    coq_ASP_ID -> coq_Manifest -> coq_Manifest **)

fun aspid_manifest_update i m =
  let val Build_Manifest oldasps oldCompatMap oldFSMap oldPolicy = m in
  Build_Manifest (manset_add coq_Eq_Class_ID_Type i oldasps) oldCompatMap
  oldFSMap oldPolicy end

(** val add_compat_map_manifest :
    coq_Manifest -> coq_ASP_Compat_MapT -> coq_Manifest **)

fun add_compat_map_manifest m cm =
  let val Build_Manifest oldasps _ oldFSMap oldPolicy = m in
  Build_Manifest oldasps cm oldFSMap oldPolicy end

(** val asp_manifest_update : coq_ASP -> coq_Manifest -> coq_Manifest **)

fun asp_manifest_update a m =
  case a of
    ASPC _ _ params =>
    let val Coq_asp_paramsC i _ _ _ = params in aspid_manifest_update i m end
  | SIG => aspid_manifest_update sig_aspid m
  | HSH => aspid_manifest_update hsh_aspid m
  | ENC _ => aspid_manifest_update enc_aspid m
  | _ => m

(** val manifest_update_env_res :
    coq_Plc -> coq_EnvironmentM -> (coq_Manifest -> (coq_Manifest, string)
    coq_ResultT) -> (coq_EnvironmentM, string) coq_ResultT **)

fun manifest_update_env_res p e f =
  let val m =
    case map_get coq_Eq_Class_ID_Type e p of
      Some mm => mm
    | None => empty_Manifest
  in
  (case f m of
     Coq_errC e0 => Coq_errC e0
   | Coq_resultC m' => Coq_resultC (map_set coq_Eq_Class_ID_Type e p m')) end

(** val manifest_update_env :
    coq_Plc -> coq_EnvironmentM -> (coq_Manifest -> coq_Manifest) ->
    coq_EnvironmentM **)

fun manifest_update_env p e f =
  let val m =
    case map_get coq_Eq_Class_ID_Type e p of
      Some mm => mm
    | None => empty_Manifest
  in
  let val m' = f m in map_set coq_Eq_Class_ID_Type e p m' end end

(** val manifest_generator' :
    coq_Plc -> coq_Term -> coq_EnvironmentM -> coq_EnvironmentM **)

fun manifest_generator' p t e =
  case t of
    Coq_asp a => manifest_update_env p e (asp_manifest_update a)
  | Coq_att q t' =>
    (case map_get coq_Eq_Class_ID_Type e p of
       Some _ => manifest_generator' q t' e
     | None => manifest_generator' q t' ((p, empty_Manifest) :: e))
  | Coq_lseq t1 t2 => manifest_generator' p t2 (manifest_generator' p t1 e)
  | Coq_bseq _ t1 t2 => manifest_generator' p t2 (manifest_generator' p t1 e)
  | Coq_bpar _ t1 t2 => manifest_generator' p t2 (manifest_generator' p t1 e)

(** val manifest_generator : coq_Term -> coq_Plc -> coq_EnvironmentM **)

fun manifest_generator t p =
  manifest_generator' p t e_empty

(** val environment_to_manifest_list :
    coq_EnvironmentM -> coq_Manifest list **)

fun environment_to_manifest_list e =
  map_vals coq_Eq_Class_ID_Type e

(** val manifest_generator_app' :
    coq_ASP_Compat_MapT -> coq_Evidence -> coq_Manifest -> (coq_Manifest,
    string) coq_ResultT **)

fun manifest_generator_app' comp_map et m =
  case et of
    Coq_uu _ fwd ps e' =>
    (case fwd of
       ENCR =>
       let val Coq_asp_paramsC a _ _ _ = ps in
       (case map_get coq_Eq_Class_ID_Type comp_map a of
          Some a' =>
          manifest_generator_app' comp_map e' (aspid_manifest_update a' m)
        | None => Coq_errC "Compatible Appraisal ASP not found in AM Library") end
     | EXTD _ =>
       let val Coq_asp_paramsC a _ _ _ = ps in
       (case map_get coq_Eq_Class_ID_Type comp_map a of
          Some a' =>
          manifest_generator_app' comp_map e' (aspid_manifest_update a' m)
        | None => Coq_errC "Compatible Appraisal ASP not found in AM Library") end
     | KEEP =>
       let val Coq_asp_paramsC a _ _ _ = ps in
       (case map_get coq_Eq_Class_ID_Type comp_map a of
          Some a' =>
          manifest_generator_app' comp_map e' (aspid_manifest_update a' m)
        | None => Coq_errC "Compatible Appraisal ASP not found in AM Library") end
     | _ => Coq_resultC m)
  | Coq_ss e1 e2 =>
    (case manifest_generator_app' comp_map e1 m of
       Coq_errC e => Coq_errC e
     | Coq_resultC m' => manifest_generator_app' comp_map e2 m')
  | _ => Coq_resultC m

(** val manifest_generator_app :
    coq_ASP_Compat_MapT -> coq_Evidence -> coq_Plc -> (coq_EnvironmentM,
    string) coq_ResultT **)

fun manifest_generator_app comp_map et p =
  res_bind
    (manifest_update_env_res p e_empty (manifest_generator_app' comp_map et))
    (fn env =>
    result_map (fn pat =>
      let val (p0, m) = pat in
      Coq_resultC (p0, (add_compat_map_manifest m comp_map)) end) env)
