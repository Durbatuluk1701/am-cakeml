(** val aspid_manifest_update :
    coq_ASP_ID -> coq_Manifest -> coq_Manifest **)

fun aspid_manifest_update i m =
  let val Build_Manifest oldPlc oldasps old_app_asps oldKnowsOf oldContext
    oldTargets oldPolicy = m
  in
  Build_Manifest oldPlc (manset_add coq_Eq_Class_ID_Type i oldasps)
  old_app_asps oldKnowsOf oldContext oldTargets oldPolicy end

(** val knowsof_manifest_update : coq_Plc -> coq_Manifest -> coq_Manifest **)

fun knowsof_manifest_update toPlc m =
  let val Build_Manifest oldPlc oldasps old_app_asps oldKnowsOf oldContext
    oldTargets oldPolicy = m
  in
  Build_Manifest oldPlc oldasps old_app_asps
  (manset_add coq_Eq_Class_ID_Type toPlc oldKnowsOf) oldContext oldTargets
  oldPolicy end

(** val knowsof_myPlc_manifest_update : coq_Manifest -> coq_Manifest **)

fun knowsof_myPlc_manifest_update m =
  knowsof_manifest_update
    (let val Build_Manifest my_abstract_plc _ _ _ _ _ _ = m in
     my_abstract_plc end) m

(** val myPlc_manifest_update : coq_Plc -> coq_Manifest -> coq_Manifest **)

fun myPlc_manifest_update p m =
  let val Build_Manifest _ oldasps old_app_asps oldKnowsOf oldContext
    oldTargets oldPolicy = m
  in
  Build_Manifest p oldasps old_app_asps oldKnowsOf oldContext oldTargets
  oldPolicy end

(** val pubkey_manifest_update : coq_Plc -> coq_Manifest -> coq_Manifest **)

fun pubkey_manifest_update p m =
  let val Build_Manifest oldPlc oldasps old_app_asps oldKnowsOf oldContext
    oldTargets oldPolicy = m
  in
  Build_Manifest oldPlc oldasps old_app_asps oldKnowsOf
  (manset_add coq_Eq_Class_ID_Type p oldContext) oldTargets oldPolicy end

(** val pubkeys_manifest_update :
    coq_Plc manifest_set -> coq_Manifest -> coq_Manifest **)

fun pubkeys_manifest_update ps m =
  let val Build_Manifest oldMyPlc oldasps old_app_asps oldKnowsOf _
    oldTargets oldPolicy = m
  in
  Build_Manifest oldMyPlc oldasps old_app_asps oldKnowsOf ps oldTargets
  oldPolicy end

(** val update_manifest_policy_targ :
    coq_Plc -> coq_Plc -> coq_Manifest -> coq_Manifest **)

fun update_manifest_policy_targ targp _ m =
  let val Build_Manifest oldMyPlc oldasps old_app_asps oldKnowsOf oldContext
    oldTargets oldPolicy = m
  in
  Build_Manifest oldMyPlc oldasps old_app_asps oldKnowsOf oldContext
  (manset_add coq_Eq_Class_ID_Type targp oldTargets) oldPolicy end

(** val asp_manifest_update : coq_ASP -> coq_Manifest -> coq_Manifest **)

fun asp_manifest_update a m =
  case a of
    ASPC _ _ params =>
    let val Coq_asp_paramsC i _ targp targid = params in
    let val m' = update_manifest_policy_targ targp targid m in
    aspid_manifest_update i m' end end
  | SIG => aspid_manifest_update sig_aspid m
  | HSH => aspid_manifest_update hsh_aspid m
  | ENC p =>
    let val m' = pubkey_manifest_update p m in
    aspid_manifest_update enc_aspid m' end
  | _ => m

(** val manifest_set_my_plc : coq_Plc -> coq_Manifest -> coq_Manifest **)

fun manifest_set_my_plc p m =
  let val Build_Manifest _ oldasps old_app_asps oldKnowsOf oldContext
    oldTargets oldPolicy = m
  in
  Build_Manifest p oldasps old_app_asps oldKnowsOf oldContext oldTargets
  oldPolicy end

(** val manifest_update_env :
    coq_Plc -> coq_EnvironmentM -> (coq_Manifest -> coq_Manifest) ->
    coq_EnvironmentM **)

fun manifest_update_env p e f =
  let val m =
    case map_get coq_Eq_Class_ID_Type e p of
      Some mm => mm
    | None => manifest_set_my_plc p empty_Manifest
  in
  let val m' = f m in map_set coq_Eq_Class_ID_Type e p m' end end

(** val asp_manifest_generator :
    coq_ASP -> coq_Plc -> coq_EnvironmentM -> coq_EnvironmentM **)

fun asp_manifest_generator a p e =
  manifest_update_env p e (asp_manifest_update a)

(** val at_manifest_generator :
    coq_Plc -> coq_Plc -> coq_EnvironmentM -> coq_EnvironmentM **)

fun at_manifest_generator fromPlc toPlc e =
  manifest_update_env fromPlc e (knowsof_manifest_update toPlc)

(** val manifest_generator' :
    coq_Plc -> coq_Term -> coq_EnvironmentM -> coq_EnvironmentM **)

fun manifest_generator' p t e =
  case t of
    Coq_asp a => asp_manifest_generator a p e
  | Coq_att q t' =>
    let val e' = at_manifest_generator p q e in
    manifest_generator' q t' e' end
  | Coq_lseq t1 t2 => manifest_generator' p t2 (manifest_generator' p t1 e)
  | Coq_bseq _ t1 t2 => manifest_generator' p t2 (manifest_generator' p t1 e)
  | Coq_bpar _ t1 t2 => manifest_generator' p t2 (manifest_generator' p t1 e)

(** val dedup_list : coq_Plc list -> coq_Plc list **)

fun dedup_list ps = case ps of
  [] => ps
| p :: ps' =>
  (case eqb nat_EqClass (count_occ (eq_plc_dec coq_Eq_Class_ID_Type) ps' p) O of
     True => p :: (dedup_list ps')
   | False => dedup_list ps')

(** val manifest_generator_terms :
    coq_Plc -> coq_Term list -> coq_EnvironmentM **)

fun manifest_generator_terms p ts =
  fold_right (manifest_generator' p) e_empty ts

(** val manifest_generator : coq_Term -> coq_Plc -> coq_EnvironmentM **)

fun manifest_generator t p =
  manifest_generator' p t e_empty

(** val places_terms' : coq_Term list -> coq_Plc -> coq_Plc list list **)

fun places_terms' ts p =
  map (places p) ts

(** val places_terms : coq_Term list -> coq_Plc -> coq_Plc list **)

fun places_terms ts p =
  dedup_list (concat (places_terms' ts p))

(** val fromSome : 'a1 option -> 'a1 -> 'a1 **)

fun fromSome v a =
  case v of
    Some v' => v'
  | None => a

(** val get_manifest_env_default :
    coq_EnvironmentM -> coq_Plc -> coq_Manifest **)

fun get_manifest_env_default e p =
  let val m' = fromSome (map_get coq_Eq_Class_ID_Type e p) empty_Manifest in
  myPlc_manifest_update p m' end

(** val get_unique_manifests_env' :
    coq_Plc list -> coq_EnvironmentM -> coq_Manifest list **)

fun get_unique_manifests_env' ps e =
  map (get_manifest_env_default e) ps

(** val get_unique_manifests_env :
    coq_Term list -> coq_Plc -> coq_EnvironmentM -> coq_Manifest list **)

fun get_unique_manifests_env ts p e =
  let val ps = places_terms ts p in get_unique_manifests_env' ps e end

(** val get_final_manifests_env :
    coq_Term list -> coq_Plc -> coq_EnvironmentM -> coq_Manifest list **)

fun get_final_manifests_env ts p e =
  let val ms = get_unique_manifests_env ts p e in
  let val ms' = map knowsof_myPlc_manifest_update ms in
  map
    (pubkeys_manifest_update
      (list_to_manset coq_Eq_Class_ID_Type (places_terms ts p))) ms' end end

(** val man_gen_run : coq_Term list -> coq_Plc -> coq_EnvironmentM **)

fun man_gen_run ts p =
  manifest_generator_terms p ts

(** val demo_man_gen_run : coq_Term list -> coq_Plc -> coq_Manifest list **)

fun demo_man_gen_run ts p =
  get_final_manifests_env ts p (man_gen_run ts p)

(** val attify : coq_Term -> coq_Plc -> coq_Term **)

fun attify t p =
  Coq_att p t

(** val attify_terms' : (coq_Term, coq_Plc) prod -> coq_Term **)

fun attify_terms' pr = case pr of
  Coq_pair t p => attify t p

(** val attify_terms : (coq_Term, coq_Plc) prod list -> coq_Term list **)

fun attify_terms ls =
  map attify_terms' ls

(** val man_gen_run_attify :
    (coq_Term, coq_Plc) prod list -> coq_Manifest list **)

fun man_gen_run_attify ls =
  let val ts = attify_terms ls in demo_man_gen_run ts default_place end

(** val app_aspid_manifest_update :
    coq_ASP_ID -> coq_Plc -> coq_Manifest -> coq_Manifest **)

fun app_aspid_manifest_update i p m =
  let val Build_Manifest oldPlc oldasps old_app_asps oldKnowsOf oldContext
    oldTargets oldPolicy = m
  in
  Build_Manifest oldPlc oldasps
  (manset_add (pair_EqClass coq_Eq_Class_ID_Type coq_Eq_Class_ID_Type)
    (Coq_pair i p) old_app_asps) oldKnowsOf oldContext oldTargets oldPolicy end

(** val manifest_generator_app' :
    coq_Evidence -> coq_Manifest -> coq_Manifest **)

fun manifest_generator_app' et m =
  case et of
    Coq_uu p fwd ps e' =>
    (case fwd of
       ENCR =>
       let val Coq_asp_paramsC _ _ p' _ = ps in
       manifest_generator_app' e' (pubkey_manifest_update p' m) end
     | EXTD =>
       let val Coq_asp_paramsC a _ _ _ = ps in
       manifest_generator_app' e' (app_aspid_manifest_update p a m) end
     | KEEP => manifest_generator_app' e' m
     | _ => m)
  | Coq_ss e1 e2 => manifest_generator_app' e2 (manifest_generator_app' e1 m)
  | _ => m

(** val manifest_generator_app : coq_Evidence -> coq_Manifest **)

fun manifest_generator_app et =
  manifest_generator_app' et empty_Manifest
