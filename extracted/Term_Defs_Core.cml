type coq_Plc = coq_ID_Type

(** val coq_Serializable_Plc : coq_Plc coq_Serializable **)

val coq_Serializable_Plc : coq_Plc coq_Serializable =
  Build_Serializable
    (let val Build_Serializable to_string _ = coq_Serializable_ID_Type in
     to_string end)
    (let val Build_Serializable _ from_string = coq_Serializable_ID_Type in
     from_string end)

type coq_N_ID = nat

type coq_Event_ID = nat

type coq_ASP_ID = coq_ID_Type

(** val coq_Serializable_ASP_ID : coq_ASP_ID coq_Serializable **)

val coq_Serializable_ASP_ID : coq_ASP_ID coq_Serializable =
  Build_Serializable
    (let val Build_Serializable to_string _ = coq_Serializable_Plc in
     to_string end)
    (let val Build_Serializable _ from_string = coq_Serializable_Plc in
     from_string end)

type coq_TARG_ID = coq_ID_Type

(** val coq_Serializable_TARG_ID : coq_TARG_ID coq_Serializable **)

val coq_Serializable_TARG_ID : coq_TARG_ID coq_Serializable =
  Build_Serializable
    (let val Build_Serializable to_string _ = coq_Serializable_ASP_ID in
     to_string end)
    (let val Build_Serializable _ from_string = coq_Serializable_ASP_ID in
     from_string end)

type coq_ASP_ARGS = (string, string) coq_MapC

(** val coq_Jsonifiable_ASP_ARGS : coq_ASP_ARGS coq_Jsonifiable **)

val coq_Jsonifiable_ASP_ARGS : coq_ASP_ARGS coq_Jsonifiable =
  Build_Jsonifiable
    (let val Build_Jsonifiable to_JSON _ =
       jsonifiable_map_serial_serial coq_Serializable_TARG_ID
         coq_Eq_Class_ID_Type coq_Serializable_TARG_ID
     in
     to_JSON end)
    (let val Build_Jsonifiable _ from_JSON =
       jsonifiable_map_serial_serial coq_Serializable_TARG_ID
         coq_Eq_Class_ID_Type coq_Serializable_TARG_ID
     in
     from_JSON end)

datatype coq_ASP_PARAMS =
  Coq_asp_paramsC coq_ASP_ID coq_ASP_ARGS coq_Plc coq_TARG_ID

(** val coq_Jsonifiable_ASP_Params : coq_ASP_PARAMS coq_Jsonifiable **)

val coq_Jsonifiable_ASP_Params : coq_ASP_PARAMS coq_Jsonifiable =
  Build_Jsonifiable (fn asp_params =>
    let val Coq_asp_paramsC asp_id args plc targ_id = asp_params in
    JSON_Object (("ASP_ID", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
     to_string asp_id end))) :: (("ASP_ARGS", (InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_ASP_ARGS in
     to_JSON args end))) :: (("ASP_PLC", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
     to_string plc end))) :: (("ASP_TARG_ID", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
     to_string targ_id end))) :: [])))) end) (fn js =>
    case coq_JSON_get_string "ASP_ID" js of
      Coq_errC _ => Coq_errC "Invalid ASP_PARAMS JSON"
    | Coq_resultC asp_id =>
      (case coq_JSON_get_Object "ASP_ARGS" js of
         Coq_errC _ => Coq_errC "Invalid ASP_PARAMS JSON"
       | Coq_resultC args =>
         (case coq_JSON_get_string "ASP_PLC" js of
            Coq_errC _ => Coq_errC "Invalid ASP_PARAMS JSON"
          | Coq_resultC plc =>
            (case coq_JSON_get_string "ASP_TARG_ID" js of
               Coq_errC _ => Coq_errC "Invalid ASP_PARAMS JSON"
             | Coq_resultC targ_id =>
               (case let val Build_Serializable _ from_string =
                       coq_Serializable_TARG_ID
                     in
                     from_string asp_id end of
                  Coq_errC _ => Coq_errC "Parsing ASP_PARAMS not successful"
                | Coq_resultC asp_id0 =>
                  (case let val Build_Jsonifiable _ from_JSON =
                          coq_Jsonifiable_ASP_ARGS
                        in
                        from_JSON args end of
                     Coq_errC _ =>
                     Coq_errC "Parsing ASP_PARAMS not successful"
                   | Coq_resultC args0 =>
                     (case let val Build_Serializable _ from_string =
                             coq_Serializable_TARG_ID
                           in
                           from_string plc end of
                        Coq_errC _ =>
                        Coq_errC "Parsing ASP_PARAMS not successful"
                      | Coq_resultC plc0 =>
                        (case let val Build_Serializable _ from_string =
                                coq_Serializable_TARG_ID
                              in
                              from_string targ_id end of
                           Coq_errC _ =>
                           Coq_errC "Parsing ASP_PARAMS not successful"
                         | Coq_resultC targ_id0 =>
                           Coq_resultC (Coq_asp_paramsC asp_id0 args0 plc0
                             targ_id0)))))))))

datatype coq_FWD =
  COMP 
| ENCR 
| EXTD nat
| KILL 
| KEEP 

(** val coq_Jsonifiable_FWD : coq_FWD coq_Jsonifiable **)

val coq_Jsonifiable_FWD : coq_FWD coq_Jsonifiable =
  Build_Jsonifiable (fn fwd =>
    case fwd of
      COMP => JSON_Object (("FWD_CONSTRUCTOR", (InJSON_String "COMP")) :: [])
    | ENCR => JSON_Object (("FWD_CONSTRUCTOR", (InJSON_String "ENCR")) :: [])
    | EXTD n =>
      JSON_Object (("FWD_CONSTRUCTOR", (InJSON_String "EXTD")) :: (("EXTD_N",
        (InJSON_String
        (let val Build_Serializable to_string _ = coq_Serializable_nat in
         to_string n end))) :: []))
    | KILL => JSON_Object (("FWD_CONSTRUCTOR", (InJSON_String "KILL")) :: [])
    | KEEP => JSON_Object (("FWD_CONSTRUCTOR", (InJSON_String "KEEP")) :: []))
    (fn js =>
    case coq_JSON_get_string "FWD_CONSTRUCTOR" js of
      Coq_errC e => Coq_errC e
    | Coq_resultC cons_name =>
      (case (fn x => fn y => x = y) cons_name "COMP" of
         True => Coq_resultC COMP
       | False =>
         (case (fn x => fn y => x = y) cons_name "ENCR" of
            True => Coq_resultC ENCR
          | False =>
            (case (fn x => fn y => x = y) cons_name "KILL" of
               True => Coq_resultC KILL
             | False =>
               (case (fn x => fn y => x = y) cons_name "KEEP" of
                  True => Coq_resultC KEEP
                | False =>
                  (case (fn x => fn y => x = y) cons_name "EXTD" of
                     True =>
                     (case coq_JSON_get_string "EXTD_N" js of
                        Coq_errC _ => Coq_errC "Parsing EXTD not successful"
                      | Coq_resultC n_str =>
                        (case let val Build_Serializable _ from_string =
                                coq_Serializable_nat
                              in
                              from_string n_str end of
                           Coq_errC e => Coq_errC e
                         | Coq_resultC n => Coq_resultC (EXTD n)))
                   | False => Coq_errC "Invalid FWD JSON"))))))

datatype coq_Evidence =
  Coq_mt 
| Coq_nn coq_N_ID
| Coq_uu coq_Plc coq_FWD coq_ASP_PARAMS coq_Evidence
| Coq_ss coq_Evidence coq_Evidence

(** val coq_Evidence_to_JSON : coq_Evidence -> coq_JSON **)

fun coq_Evidence_to_JSON e = case e of
  Coq_mt => JSON_Object (("EVIDENCE_CONSTRUCTOR", (InJSON_String "mt")) :: [])
| Coq_nn n =>
  JSON_Object (("EVIDENCE_CONSTRUCTOR", (InJSON_String "nn")) :: (("N_ID",
    (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_nat in
     to_string n end))) :: []))
| Coq_uu plc fwd ps e' =>
  JSON_Object (("EVIDENCE_CONSTRUCTOR", (InJSON_String "uu")) :: (("PLC",
    (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
     to_string plc end))) :: (("FWD", (InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_FWD in
     to_JSON fwd end))) :: (("ASP_PARAMS", (InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_ASP_Params in
     to_JSON ps end))) :: (("EVIDENCE", (InJSON_Object
    (coq_Evidence_to_JSON e'))) :: [])))))
| Coq_ss e1 e2 =>
  JSON_Object (("EVIDENCE_CONSTRUCTOR", (InJSON_String
    "ss")) :: (("EVIDENCE1", (InJSON_Object
    (coq_Evidence_to_JSON e1))) :: (("EVIDENCE2", (InJSON_Object
    (coq_Evidence_to_JSON e2))) :: [])))

(** val coq_Evidence_from_JSON :
    coq_JSON -> (coq_Evidence, string) coq_ResultT **)

fun coq_Evidence_from_JSON js =
  case coq_JSON_get_string "EVIDENCE_CONSTRUCTOR" js of
    Coq_errC e => Coq_errC e
  | Coq_resultC cons_name =>
    (case (fn x => fn y => x = y) cons_name "mt" of
       True => Coq_resultC Coq_mt
     | False =>
       (case (fn x => fn y => x = y) cons_name "nn" of
          True =>
          (case coq_JSON_get_string "N_ID" js of
             Coq_errC _ => Coq_errC "Parsing nn not successful"
           | Coq_resultC nVal =>
             (case let val Build_Serializable _ from_string =
                     coq_Serializable_nat
                   in
                   from_string nVal end of
                Coq_errC e => Coq_errC e
              | Coq_resultC n => Coq_resultC (Coq_nn n)))
        | False =>
          (case (fn x => fn y => x = y) cons_name "uu" of
             True =>
             let val JSON_Object m = js in
             (case m of
                [] => Coq_errC "Parsing uu not successful"
              | _ :: l =>
                (case l of
                   [] => Coq_errC "Parsing uu not successful"
                 | p :: l0 =>
                   let val (_, i) = p in
                   (case i of
                      InJSON_String plc =>
                      (case l0 of
                         [] => Coq_errC "Parsing uu not successful"
                       | p0 :: l1 =>
                         let val (_, i0) = p0 in
                         (case i0 of
                            InJSON_Object fwd =>
                            (case l1 of
                               [] => Coq_errC "Parsing uu not successful"
                             | p1 :: l2 =>
                               let val (_, i1) = p1 in
                               (case i1 of
                                  InJSON_Object asp_par =>
                                  (case l2 of
                                     [] =>
                                     Coq_errC "Parsing uu not successful"
                                   | p2 :: l3 =>
                                     let val (_, i2) = p2 in
                                     (case i2 of
                                        InJSON_Object ev' =>
                                        (case l3 of
                                           [] =>
                                           (case let val Build_Serializable _
                                                   from_string =
                                                   coq_Serializable_TARG_ID
                                                 in
                                                 from_string plc end of
                                              Coq_errC _ =>
                                              Coq_errC
                                                "Evidence_from_JSON: error parsing uu"
                                            | Coq_resultC plc0 =>
                                              (case let val Build_Jsonifiable _
                                                      from_JSON =
                                                      coq_Jsonifiable_FWD
                                                    in
                                                    from_JSON fwd end of
                                                 Coq_errC _ =>
                                                 Coq_errC
                                                   "Evidence_from_JSON: error parsing uu"
                                               | Coq_resultC fwd0 =>
                                                 (case let val Build_Jsonifiable _
                                                         from_JSON =
                                                         coq_Jsonifiable_ASP_Params
                                                       in
                                                       from_JSON asp_par end of
                                                    Coq_errC _ =>
                                                    Coq_errC
                                                      "Evidence_from_JSON: error parsing uu"
                                                  | Coq_resultC ps =>
                                                    (case coq_Evidence_from_JSON
                                                            ev' of
                                                       Coq_errC _ =>
                                                       Coq_errC
                                                         "Evidence_from_JSON: error parsing uu"
                                                     | Coq_resultC e =>
                                                       Coq_resultC (Coq_uu
                                                         plc0 fwd0 ps e)))))
                                         | _ :: _ =>
                                           Coq_errC
                                             "Parsing uu not successful")
                                      | _ =>
                                        Coq_errC "Parsing uu not successful") end)
                                | _ => Coq_errC "Parsing uu not successful") end)
                          | _ => Coq_errC "Parsing uu not successful") end)
                    | _ => Coq_errC "Parsing uu not successful") end)) end
           | False =>
             (case (fn x => fn y => x = y) cons_name "ss" of
                True =>
                let val JSON_Object m = js in
                (case m of
                   [] => Coq_errC "Parsing ss not successful"
                 | _ :: l =>
                   (case l of
                      [] => Coq_errC "Parsing ss not successful"
                    | p :: l0 =>
                      let val (_, i) = p in
                      (case i of
                         InJSON_Object ev1 =>
                         (case l0 of
                            [] => Coq_errC "Parsing ss not successful"
                          | p0 :: l1 =>
                            let val (_, i0) = p0 in
                            (case i0 of
                               InJSON_Object ev2 =>
                               (case l1 of
                                  [] =>
                                  (case coq_Evidence_from_JSON ev1 of
                                     Coq_errC _ =>
                                     Coq_errC "Parsing ss not successful"
                                   | Coq_resultC e1 =>
                                     (case coq_Evidence_from_JSON ev2 of
                                        Coq_errC _ =>
                                        Coq_errC "Parsing ss not successful"
                                      | Coq_resultC e2 =>
                                        Coq_resultC (Coq_ss e1 e2)))
                                | _ :: _ =>
                                  Coq_errC "Parsing ss not successful")
                             | _ => Coq_errC "Parsing ss not successful") end)
                       | _ => Coq_errC "Parsing ss not successful") end)) end
              | False => Coq_errC "Invalid Evidence JSON constructor name"))))

(** val coq_Jsonifiable_Evidence : coq_Evidence coq_Jsonifiable **)

val coq_Jsonifiable_Evidence : coq_Evidence coq_Jsonifiable =
  Build_Jsonifiable coq_Evidence_to_JSON coq_Evidence_from_JSON

datatype coq_SP =
  ALL 
| NONE 

(** val coq_Serializable_SP : coq_SP coq_Serializable **)

val coq_Serializable_SP : coq_SP coq_Serializable =
  Build_Serializable (fn sp => case sp of
                                 ALL => "ALL"
                               | NONE => "NONE") (fn s =>
    case (fn x => fn y => x = y) s "ALL" of
      True => Coq_resultC ALL
    | False =>
      (case (fn x => fn y => x = y) s "NONE" of
         True => Coq_resultC NONE
       | False => Coq_errC "Invalid SP string"))

datatype coq_ASP =
  NULL 
| CPY 
| ASPC coq_SP coq_FWD coq_ASP_PARAMS
| SIG 
| HSH 
| ENC coq_Plc

(** val coq_Jsonifiable_ASP : coq_ASP coq_Jsonifiable **)

val coq_Jsonifiable_ASP : coq_ASP coq_Jsonifiable =
  Build_Jsonifiable (fn a =>
    case a of
      NULL => JSON_Object (("ASP_CONSTRUCTOR", (InJSON_String "NULL")) :: [])
    | CPY => JSON_Object (("ASP_CONSTRUCTOR", (InJSON_String "CPY")) :: [])
    | ASPC sp fwd ps =>
      JSON_Object (("ASP_CONSTRUCTOR", (InJSON_String "ASPC")) :: (("ASP_SP",
        (InJSON_String
        (let val Build_Serializable to_string _ = coq_Serializable_SP in
         to_string sp end))) :: (("ASP_FWD", (InJSON_Object
        (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_FWD in
         to_JSON fwd end))) :: (("ASP_PARAMS", (InJSON_Object
        (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_ASP_Params in
         to_JSON ps end))) :: []))))
    | SIG => JSON_Object (("ASP_CONSTRUCTOR", (InJSON_String "SIG")) :: [])
    | HSH => JSON_Object (("ASP_CONSTRUCTOR", (InJSON_String "HSH")) :: [])
    | ENC q =>
      JSON_Object (("ASP_CONSTRUCTOR", (InJSON_String "ENC")) :: (("ENC_PLC",
        (InJSON_String
        (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
         to_string q end))) :: []))) (fn js =>
    case coq_JSON_get_string "ASP_CONSTRUCTOR" js of
      Coq_errC _ => Coq_errC "Invalid JSON ASP Constructor Name"
    | Coq_resultC cons_name =>
      (case (fn x => fn y => x = y) cons_name "NULL" of
         True => Coq_resultC NULL
       | False =>
         (case (fn x => fn y => x = y) cons_name "CPY" of
            True => Coq_resultC CPY
          | False =>
            (case (fn x => fn y => x = y) cons_name "ASPC" of
               True =>
               (case coq_JSON_get_string "ASP_SP" js of
                  Coq_errC _ => Coq_errC "Parsing ASPC not successful"
                | Coq_resultC sp =>
                  (case coq_JSON_get_Object "ASP_FWD" js of
                     Coq_errC _ => Coq_errC "Parsing ASPC not successful"
                   | Coq_resultC fwd =>
                     (case coq_JSON_get_Object "ASP_PARAMS" js of
                        Coq_errC _ => Coq_errC "Parsing ASPC not successful"
                      | Coq_resultC ps =>
                        (case let val Build_Serializable _ from_string =
                                coq_Serializable_SP
                              in
                              from_string sp end of
                           Coq_errC _ =>
                           Coq_errC "Parsing ASPC not successful"
                         | Coq_resultC sp0 =>
                           (case let val Build_Jsonifiable _ from_JSON =
                                   coq_Jsonifiable_FWD
                                 in
                                 from_JSON fwd end of
                              Coq_errC _ =>
                              Coq_errC "Parsing ASPC not successful"
                            | Coq_resultC fwd0 =>
                              (case let val Build_Jsonifiable _ from_JSON =
                                      coq_Jsonifiable_ASP_Params
                                    in
                                    from_JSON ps end of
                                 Coq_errC _ =>
                                 Coq_errC "Parsing ASPC not successful"
                               | Coq_resultC ps0 =>
                                 Coq_resultC (ASPC sp0 fwd0 ps0)))))))
             | False =>
               (case (fn x => fn y => x = y) cons_name "SIG" of
                  True => Coq_resultC SIG
                | False =>
                  (case (fn x => fn y => x = y) cons_name "HSH" of
                     True => Coq_resultC HSH
                   | False =>
                     (case (fn x => fn y => x = y) cons_name "ENC" of
                        True =>
                        (case coq_JSON_get_string "ENC_PLC" js of
                           Coq_errC _ => Coq_errC "Parsing ENC not successful"
                         | Coq_resultC q =>
                           (case let val Build_Serializable _ from_string =
                                   coq_Serializable_TARG_ID
                                 in
                                 from_string q end of
                              Coq_errC _ =>
                              Coq_errC
                                "Parsing ENC PLC from string not successful"
                            | Coq_resultC q0 => Coq_resultC (ENC q0)))
                      | False => Coq_errC "Invalid JSON ASP Constructor Name")))))))

type coq_Split = coq_SP * coq_SP

(** val coq_Jsonifiable_Split : coq_Split coq_Jsonifiable **)

val coq_Jsonifiable_Split : coq_Split coq_Jsonifiable =
  Build_Jsonifiable (fn pat =>
    let val (s1, s2) = pat in
    JSON_Object (("split1", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_SP in
     to_string s1 end))) :: (("split2", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_SP in
     to_string s2 end))) :: [])) end) (fn js =>
    case coq_JSON_get_string "split1" js of
      Coq_errC _ => Coq_errC "Invalid Split JSON"
    | Coq_resultC s1 =>
      (case coq_JSON_get_string "split2" js of
         Coq_errC _ => Coq_errC "Invalid Split JSON"
       | Coq_resultC s2 =>
         (case let val Build_Serializable _ from_string = coq_Serializable_SP
               in
               from_string s1 end of
            Coq_errC _ => Coq_errC "Parsing split not successful"
          | Coq_resultC s3 =>
            (case let val Build_Serializable _ from_string =
                    coq_Serializable_SP
                  in
                  from_string s2 end of
               Coq_errC _ => Coq_errC "Parsing split not successful"
             | Coq_resultC s4 => Coq_resultC (s3, s4)))))

datatype coq_Term =
  Coq_asp coq_ASP
| Coq_att coq_Plc coq_Term
| Coq_lseq coq_Term coq_Term
| Coq_bseq coq_Split coq_Term coq_Term
| Coq_bpar coq_Split coq_Term coq_Term

(** val coq_Term_to_JSON : coq_Term -> coq_JSON **)

fun coq_Term_to_JSON t = case t of
  Coq_asp a =>
  JSON_Object (("TERM_CONSTRUCTOR", (InJSON_String "asp")) :: (("TERM_BODY",
    (InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_ASP in
     to_JSON a end))) :: []))
| Coq_att p t1 =>
  JSON_Object (("TERM_CONSTRUCTOR", (InJSON_String "att")) :: (("TERM_BODY",
    (InJSON_Array ((InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
     to_string p end)) :: ((InJSON_Object
    (coq_Term_to_JSON t1)) :: [])))) :: []))
| Coq_lseq t1 t2 =>
  JSON_Object (("TERM_CONSTRUCTOR", (InJSON_String "lseq")) :: (("TERM_BODY",
    (InJSON_Array ((InJSON_Object (coq_Term_to_JSON t1)) :: ((InJSON_Object
    (coq_Term_to_JSON t2)) :: [])))) :: []))
| Coq_bseq s t1 t2 =>
  JSON_Object (("TERM_CONSTRUCTOR", (InJSON_String "bseq")) :: (("TERM_BODY",
    (InJSON_Array ((InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_Split in
     to_JSON s end)) :: ((InJSON_Object
    (coq_Term_to_JSON t1)) :: ((InJSON_Object
    (coq_Term_to_JSON t2)) :: []))))) :: []))
| Coq_bpar s t1 t2 =>
  JSON_Object (("TERM_CONSTRUCTOR", (InJSON_String "bpar")) :: (("TERM_BODY",
    (InJSON_Array ((InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_Split in
     to_JSON s end)) :: ((InJSON_Object
    (coq_Term_to_JSON t1)) :: ((InJSON_Object
    (coq_Term_to_JSON t2)) :: []))))) :: []))

(** val coq_Term_from_JSON : coq_JSON -> (coq_Term, string) coq_ResultT **)

fun coq_Term_from_JSON js =
  case coq_JSON_get_string "TERM_CONSTRUCTOR" js of
    Coq_errC e => Coq_errC e
  | Coq_resultC cons_name =>
    (case (fn x => fn y => x = y) cons_name "asp" of
       True =>
       (case coq_JSON_get_Object "TERM_BODY" js of
          Coq_errC e => Coq_errC e
        | Coq_resultC js' =>
          (case let val Build_Jsonifiable _ from_JSON = coq_Jsonifiable_ASP in
                from_JSON js' end of
             Coq_errC e => Coq_errC e
           | Coq_resultC a => Coq_resultC (Coq_asp a)))
     | False =>
       (case (fn x => fn y => x = y) cons_name "att" of
          True =>
          let val JSON_Object m = js in
          (case m of
             [] =>
             Coq_errC
               "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
           | _ :: l =>
             (case l of
                [] =>
                Coq_errC
                  "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
              | p :: l0 =>
                let val (_, i) = p in
                (case i of
                   InJSON_Array l1 =>
                   (case l1 of
                      [] =>
                      Coq_errC
                        "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                    | i0 :: l2 =>
                      (case i0 of
                         InJSON_String plc =>
                         (case l2 of
                            [] =>
                            Coq_errC
                              "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                          | i1 :: l3 =>
                            (case i1 of
                               InJSON_Object js' =>
                               (case l3 of
                                  [] =>
                                  (case l0 of
                                     [] =>
                                     (case let val Build_Serializable _
                                             from_string =
                                             coq_Serializable_TARG_ID
                                           in
                                           from_string plc end of
                                        Coq_errC _ =>
                                        Coq_errC "Parsing att not successful"
                                      | Coq_resultC plc0 =>
                                        (case coq_Term_from_JSON js' of
                                           Coq_errC _ =>
                                           Coq_errC
                                             "Parsing att not successful"
                                         | Coq_resultC t =>
                                           Coq_resultC (Coq_att plc0 t)))
                                   | _ :: _ =>
                                     Coq_errC
                                       "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER")
                                | _ :: _ =>
                                  Coq_errC
                                    "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER")
                             | _ =>
                               Coq_errC
                                 "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                       | _ =>
                         Coq_errC
                           "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                 | _ =>
                   Coq_errC
                     "Invalid att JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER") end)) end
        | False =>
          (case (fn x => fn y => x = y) cons_name "lseq" of
             True =>
             let val JSON_Object m = js in
             (case m of
                [] =>
                Coq_errC
                  "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
              | _ :: l =>
                (case l of
                   [] =>
                   Coq_errC
                     "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                 | p :: l0 =>
                   let val (_, i) = p in
                   (case i of
                      InJSON_Array l1 =>
                      (case l1 of
                         [] =>
                         Coq_errC
                           "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                       | i0 :: l2 =>
                         (case i0 of
                            InJSON_Object t1js =>
                            (case l2 of
                               [] =>
                               Coq_errC
                                 "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                             | i1 :: l3 =>
                               (case i1 of
                                  InJSON_Object t2js =>
                                  (case l3 of
                                     [] =>
                                     (case l0 of
                                        [] =>
                                        (case coq_Term_from_JSON t1js of
                                           Coq_errC _ =>
                                           Coq_errC
                                             "Parsing lseq not successful"
                                         | Coq_resultC t1 =>
                                           (case coq_Term_from_JSON t2js of
                                              Coq_errC _ =>
                                              Coq_errC
                                                "Parsing lseq not successful"
                                            | Coq_resultC t2 =>
                                              Coq_resultC (Coq_lseq t1 t2)))
                                      | _ :: _ =>
                                        Coq_errC
                                          "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER")
                                   | _ :: _ =>
                                     Coq_errC
                                       "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER")
                                | _ =>
                                  Coq_errC
                                    "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                          | _ =>
                            Coq_errC
                              "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                    | _ =>
                      Coq_errC
                        "Invalid lseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER") end)) end
           | False =>
             (case (fn x => fn y => x = y) cons_name "bseq" of
                True =>
                let val JSON_Object m = js in
                (case m of
                   [] =>
                   Coq_errC
                     "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                 | _ :: l =>
                   (case l of
                      [] =>
                      Coq_errC
                        "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                    | p :: l0 =>
                      let val (_, i) = p in
                      (case i of
                         InJSON_Array l1 =>
                         (case l1 of
                            [] =>
                            Coq_errC
                              "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                          | i0 :: l2 =>
                            (case i0 of
                               InJSON_Object spjs =>
                               (case l2 of
                                  [] =>
                                  Coq_errC
                                    "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                                | i1 :: l3 =>
                                  (case i1 of
                                     InJSON_Object t1js =>
                                     (case l3 of
                                        [] =>
                                        Coq_errC
                                          "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                                      | i2 :: l4 =>
                                        (case i2 of
                                           InJSON_Object t2js =>
                                           (case l4 of
                                              [] =>
                                              (case l0 of
                                                 [] =>
                                                 (case let val Build_Jsonifiable _
                                                         from_JSON =
                                                         coq_Jsonifiable_Split
                                                       in
                                                       from_JSON spjs end of
                                                    Coq_errC _ =>
                                                    Coq_errC
                                                      "Parsing bseq not successful"
                                                  | Coq_resultC s =>
                                                    (case coq_Term_from_JSON
                                                            t1js of
                                                       Coq_errC _ =>
                                                       Coq_errC
                                                         "Parsing bseq not successful"
                                                     | Coq_resultC t1 =>
                                                       (case coq_Term_from_JSON
                                                               t2js of
                                                          Coq_errC _ =>
                                                          Coq_errC
                                                            "Parsing bseq not successful"
                                                        | Coq_resultC t2 =>
                                                          Coq_resultC
                                                            (Coq_bseq s t1 t2))))
                                               | _ :: _ =>
                                                 Coq_errC
                                                   "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER")
                                            | _ :: _ =>
                                              Coq_errC
                                                "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER")
                                         | _ =>
                                           Coq_errC
                                             "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                                   | _ =>
                                     Coq_errC
                                       "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                             | _ =>
                               Coq_errC
                                 "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                       | _ =>
                         Coq_errC
                           "Invalid bseq JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER") end)) end
              | False =>
                (case (fn x => fn y => x = y) cons_name "bpar" of
                   True =>
                   let val JSON_Object m = js in
                   (case m of
                      [] =>
                      Coq_errC
                        "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                    | _ :: l =>
                      (case l of
                         [] =>
                         Coq_errC
                           "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                       | p :: l0 =>
                         let val (_, i) = p in
                         (case i of
                            InJSON_Array l1 =>
                            (case l1 of
                               [] =>
                               Coq_errC
                                 "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                             | i0 :: l2 =>
                               (case i0 of
                                  InJSON_Object spjs =>
                                  (case l2 of
                                     [] =>
                                     Coq_errC
                                       "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                                   | i1 :: l3 =>
                                     (case i1 of
                                        InJSON_Object t1js =>
                                        (case l3 of
                                           [] =>
                                           Coq_errC
                                             "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"
                                         | i2 :: l4 =>
                                           (case i2 of
                                              InJSON_Object t2js =>
                                              (case l4 of
                                                 [] =>
                                                 (case l0 of
                                                    [] =>
                                                    (case let val Build_Jsonifiable _
                                                            from_JSON =
                                                            coq_Jsonifiable_Split
                                                          in
                                                          from_JSON spjs end of
                                                       Coq_errC _ =>
                                                       Coq_errC
                                                         "Parsing bpar not successful"
                                                     | Coq_resultC s =>
                                                       (case coq_Term_from_JSON
                                                               t1js of
                                                          Coq_errC _ =>
                                                          Coq_errC
                                                            "Parsing bpar not successful"
                                                        | Coq_resultC t1 =>
                                                          (case coq_Term_from_JSON
                                                                  t2js of
                                                             Coq_errC _ =>
                                                             Coq_errC
                                                               "Parsing bpar not successful"
                                                           | Coq_resultC t2 =>
                                                             Coq_resultC
                                                               (Coq_bpar s t1
                                                               t2))))
                                                  | _ :: _ =>
                                                    Coq_errC
                                                      "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER")
                                               | _ :: _ =>
                                                 Coq_errC
                                                   "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER")
                                            | _ =>
                                              Coq_errC
                                                "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                                      | _ =>
                                        Coq_errC
                                          "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                                | _ =>
                                  Coq_errC
                                    "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER"))
                          | _ =>
                            Coq_errC
                              "Invalid bpar JSON: REMEMBER IT MUST BE IN A SPECIFIC FORMAT AND ORDER") end)) end
                 | False =>
                   Coq_errC "Invalid TERM CONSTRUCTOR in Term_from_JSON")))))

(** val coq_Jsonifiable_Term : coq_Term coq_Jsonifiable **)

val coq_Jsonifiable_Term : coq_Term coq_Jsonifiable =
  Build_Jsonifiable coq_Term_to_JSON coq_Term_from_JSON

datatype coq_ASP_Core =
  NULLC 
| CLEAR 
| CPYC 
| ASPCC coq_FWD coq_ASP_PARAMS

type coq_Loc = nat

datatype coq_Core_Term =
  Coq_aspc coq_ASP_Core
| Coq_attc coq_Plc coq_Term
| Coq_lseqc coq_Core_Term coq_Core_Term
| Coq_bseqc coq_Core_Term coq_Core_Term
| Coq_bparc coq_Loc coq_Core_Term coq_Core_Term

type coq_RawEv = coq_BS list

(** val coq_Jsonifiable_RawEv : coq_RawEv coq_Jsonifiable **)

val coq_Jsonifiable_RawEv : coq_RawEv coq_Jsonifiable =
  Build_Jsonifiable (fn ev => JSON_Object (("RawEv", (InJSON_Array
    (map (fn bs => InJSON_String
      (let val Build_Serializable to_string _ = coq_Serializable_BS in
       to_string bs end)) ev))) :: [])) (fn js =>
    case coq_JSON_get_Array "RawEv" js of
      Coq_errC e => Coq_errC e
    | Coq_resultC js' =>
      result_map (fn js'0 =>
        case js'0 of
          InJSON_String s =>
          let val Build_Serializable _ from_string = coq_Serializable_BS in
          from_string s end
        | _ => Coq_errC "Invalid RawEv JSON") js')

datatype coq_AppResultC =
  Coq_mtc_app 
| Coq_nnc_app coq_N_ID coq_BS
| Coq_ggc_app coq_Plc coq_ASP_PARAMS coq_RawEv coq_AppResultC
| Coq_hhc_app coq_Plc coq_ASP_PARAMS coq_BS coq_AppResultC
| Coq_eec_app coq_Plc coq_ASP_PARAMS coq_BS coq_AppResultC
| Coq_ssc_app coq_AppResultC coq_AppResultC

(** val coq_AppResultC_to_Json : coq_AppResultC -> coq_JSON **)

fun coq_AppResultC_to_Json a = case a of
  Coq_mtc_app =>
  JSON_Object (("AppResultC_CONSTRUCTOR", (InJSON_String "mtc_app")) :: [])
| Coq_nnc_app n bs =>
  JSON_Object (("AppResultC_CONSTRUCTOR", (InJSON_String
    "nnc_app")) :: (("N_ID", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_nat in
     to_string n end))) :: (("BS", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_BS in
     to_string bs end))) :: [])))
| Coq_ggc_app plc ps rawEv res =>
  JSON_Object (("AppResultC_CONSTRUCTOR", (InJSON_String
    "ggc_app")) :: (("PLC", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
     to_string plc end))) :: (("ASP_PARAMS", (InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_ASP_Params in
     to_JSON ps end))) :: (("RawEv", (InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_RawEv in
     to_JSON rawEv end))) :: (("AppResultC", (InJSON_Object
    (coq_AppResultC_to_Json res))) :: [])))))
| Coq_hhc_app plc ps bs res =>
  JSON_Object (("AppResultC_CONSTRUCTOR", (InJSON_String
    "hhc_app")) :: (("PLC", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
     to_string plc end))) :: (("ASP_PARAMS", (InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_ASP_Params in
     to_JSON ps end))) :: (("BS", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_BS in
     to_string bs end))) :: (("AppResultC", (InJSON_Object
    (coq_AppResultC_to_Json res))) :: [])))))
| Coq_eec_app plc ps bs res =>
  JSON_Object (("AppResultC_CONSTRUCTOR", (InJSON_String
    "eec_app")) :: (("PLC", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_TARG_ID in
     to_string plc end))) :: (("ASP_PARAMS", (InJSON_Object
    (let val Build_Jsonifiable to_JSON _ = coq_Jsonifiable_ASP_Params in
     to_JSON ps end))) :: (("BS", (InJSON_String
    (let val Build_Serializable to_string _ = coq_Serializable_BS in
     to_string bs end))) :: (("AppResultC", (InJSON_Object
    (coq_AppResultC_to_Json res))) :: [])))))
| Coq_ssc_app res1 res2 =>
  JSON_Object (("AppResultC_CONSTRUCTOR", (InJSON_String
    "ssc_app")) :: (("AppResultC1", (InJSON_Object
    (coq_AppResultC_to_Json res1))) :: (("AppResultC2", (InJSON_Object
    (coq_AppResultC_to_Json res2))) :: [])))

(** val coq_AppResultC_from_JSON :
    coq_JSON -> (coq_AppResultC, string) coq_ResultT **)

fun coq_AppResultC_from_JSON js =
  case coq_JSON_get_string "AppResultC_CONSTRUCTOR" js of
    Coq_errC _ => Coq_errC "Invalid AppResultC JSON"
  | Coq_resultC cons_name =>
    (case (fn x => fn y => x = y) cons_name "mt_app" of
       True => Coq_resultC Coq_mtc_app
     | False =>
       (case (fn x => fn y => x = y) cons_name "nnc_app" of
          True =>
          let val JSON_Object m = js in
          (case m of
             [] => Coq_errC "Parsing nnc_app not successful"
           | _ :: l =>
             (case l of
                [] => Coq_errC "Parsing nnc_app not successful"
              | p0 :: l0 =>
                let val (_, i) = p0 in
                (case i of
                   InJSON_String n =>
                   (case l0 of
                      [] => Coq_errC "Parsing nnc_app not successful"
                    | p1 :: l1 =>
                      let val (_, i0) = p1 in
                      (case i0 of
                         InJSON_String bs =>
                         (case l1 of
                            [] =>
                            (case let val Build_Serializable _ from_string =
                                    coq_Serializable_nat
                                  in
                                  from_string n end of
                               Coq_errC _ =>
                               Coq_errC "Parsing nnc_app not successful"
                             | Coq_resultC n0 =>
                               (case let val Build_Serializable _
                                       from_string = coq_Serializable_BS
                                     in
                                     from_string bs end of
                                  Coq_errC _ =>
                                  Coq_errC "Parsing nnc_app not successful"
                                | Coq_resultC bs0 =>
                                  Coq_resultC (Coq_nnc_app n0 bs0)))
                          | _ :: _ =>
                            Coq_errC "Parsing nnc_app not successful")
                       | _ => Coq_errC "Parsing nnc_app not successful") end)
                 | _ => Coq_errC "Parsing nnc_app not successful") end)) end
        | False =>
          (case (fn x => fn y => x = y) cons_name "ggc_app" of
             True =>
             let val JSON_Object m = js in
             (case m of
                [] => Coq_errC "Parsing ggc_app not successful"
              | _ :: l =>
                (case l of
                   [] => Coq_errC "Parsing ggc_app not successful"
                 | p0 :: l0 =>
                   let val (_, i) = p0 in
                   (case i of
                      InJSON_String plc =>
                      (case l0 of
                         [] => Coq_errC "Parsing ggc_app not successful"
                       | p1 :: l1 =>
                         let val (_, i0) = p1 in
                         (case i0 of
                            InJSON_Object ps =>
                            (case l1 of
                               [] => Coq_errC "Parsing ggc_app not successful"
                             | p2 :: l2 =>
                               let val (_, i1) = p2 in
                               (case i1 of
                                  InJSON_Object rawEv =>
                                  (case l2 of
                                     [] =>
                                     Coq_errC "Parsing ggc_app not successful"
                                   | p3 :: l3 =>
                                     let val (_, i2) = p3 in
                                     (case i2 of
                                        InJSON_Object res =>
                                        (case l3 of
                                           [] =>
                                           (case let val Build_Serializable _
                                                   from_string =
                                                   coq_Serializable_TARG_ID
                                                 in
                                                 from_string plc end of
                                              Coq_errC _ =>
                                              Coq_errC
                                                "Parsing ggc_app not successful"
                                            | Coq_resultC plc0 =>
                                              (case let val Build_Jsonifiable _
                                                      from_JSON =
                                                      coq_Jsonifiable_ASP_Params
                                                    in
                                                    from_JSON ps end of
                                                 Coq_errC _ =>
                                                 Coq_errC
                                                   "Parsing ggc_app not successful"
                                               | Coq_resultC ps0 =>
                                                 (case let val Build_Jsonifiable _
                                                         from_JSON =
                                                         coq_Jsonifiable_RawEv
                                                       in
                                                       from_JSON rawEv end of
                                                    Coq_errC _ =>
                                                    Coq_errC
                                                      "Parsing ggc_app not successful"
                                                  | Coq_resultC rawEv0 =>
                                                    (case coq_AppResultC_from_JSON
                                                            res of
                                                       Coq_errC _ =>
                                                       Coq_errC
                                                         "Parsing ggc_app not successful"
                                                     | Coq_resultC res0 =>
                                                       Coq_resultC
                                                         (Coq_ggc_app plc0
                                                         ps0 rawEv0 res0)))))
                                         | _ :: _ =>
                                           Coq_errC
                                             "Parsing ggc_app not successful")
                                      | _ =>
                                        Coq_errC
                                          "Parsing ggc_app not successful") end)
                                | _ =>
                                  Coq_errC "Parsing ggc_app not successful") end)
                          | _ => Coq_errC "Parsing ggc_app not successful") end)
                    | _ => Coq_errC "Parsing ggc_app not successful") end)) end
           | False =>
             (case (fn x => fn y => x = y) cons_name "hhc_app" of
                True =>
                let val JSON_Object m = js in
                (case m of
                   [] => Coq_errC "Parsing hhc_app not successful"
                 | _ :: l =>
                   (case l of
                      [] => Coq_errC "Parsing hhc_app not successful"
                    | p0 :: l0 =>
                      let val (_, i) = p0 in
                      (case i of
                         InJSON_String plc =>
                         (case l0 of
                            [] => Coq_errC "Parsing hhc_app not successful"
                          | p1 :: l1 =>
                            let val (_, i0) = p1 in
                            (case i0 of
                               InJSON_Object ps =>
                               (case l1 of
                                  [] =>
                                  Coq_errC "Parsing hhc_app not successful"
                                | p2 :: l2 =>
                                  let val (_, i1) = p2 in
                                  (case i1 of
                                     InJSON_String bs =>
                                     (case l2 of
                                        [] =>
                                        Coq_errC
                                          "Parsing hhc_app not successful"
                                      | p3 :: l3 =>
                                        let val (_, i2) = p3 in
                                        (case i2 of
                                           InJSON_Object res =>
                                           (case l3 of
                                              [] =>
                                              (case let val Build_Serializable _
                                                      from_string =
                                                      coq_Serializable_TARG_ID
                                                    in
                                                    from_string plc end of
                                                 Coq_errC _ =>
                                                 Coq_errC
                                                   "Parsing hhc_app not successful"
                                               | Coq_resultC plc0 =>
                                                 (case let val Build_Jsonifiable _
                                                         from_JSON =
                                                         coq_Jsonifiable_ASP_Params
                                                       in
                                                       from_JSON ps end of
                                                    Coq_errC _ =>
                                                    Coq_errC
                                                      "Parsing hhc_app not successful"
                                                  | Coq_resultC ps0 =>
                                                    (case let val Build_Serializable _
                                                            from_string =
                                                            coq_Serializable_BS
                                                          in
                                                          from_string bs end of
                                                       Coq_errC _ =>
                                                       Coq_errC
                                                         "Parsing hhc_app not successful"
                                                     | Coq_resultC bs0 =>
                                                       (case coq_AppResultC_from_JSON
                                                               res of
                                                          Coq_errC _ =>
                                                          Coq_errC
                                                            "Parsing hhc_app not successful"
                                                        | Coq_resultC res0 =>
                                                          Coq_resultC
                                                            (Coq_hhc_app plc0
                                                            ps0 bs0 res0)))))
                                            | _ :: _ =>
                                              Coq_errC
                                                "Parsing hhc_app not successful")
                                         | _ =>
                                           Coq_errC
                                             "Parsing hhc_app not successful") end)
                                   | _ =>
                                     Coq_errC "Parsing hhc_app not successful") end)
                             | _ => Coq_errC "Parsing hhc_app not successful") end)
                       | _ => Coq_errC "Parsing hhc_app not successful") end)) end
              | False =>
                (case (fn x => fn y => x = y) cons_name "eec_app" of
                   True =>
                   let val JSON_Object m = js in
                   (case m of
                      [] => Coq_errC "Parsing eec_app not successful"
                    | _ :: l =>
                      (case l of
                         [] => Coq_errC "Parsing eec_app not successful"
                       | p0 :: l0 =>
                         let val (_, i) = p0 in
                         (case i of
                            InJSON_String plc =>
                            (case l0 of
                               [] => Coq_errC "Parsing eec_app not successful"
                             | p1 :: l1 =>
                               let val (_, i0) = p1 in
                               (case i0 of
                                  InJSON_Object ps =>
                                  (case l1 of
                                     [] =>
                                     Coq_errC "Parsing eec_app not successful"
                                   | p2 :: l2 =>
                                     let val (_, i1) = p2 in
                                     (case i1 of
                                        InJSON_String bs =>
                                        (case l2 of
                                           [] =>
                                           Coq_errC
                                             "Parsing eec_app not successful"
                                         | p3 :: l3 =>
                                           let val (_, i2) = p3 in
                                           (case i2 of
                                              InJSON_Object res =>
                                              (case l3 of
                                                 [] =>
                                                 (case let val Build_Serializable _
                                                         from_string =
                                                         coq_Serializable_TARG_ID
                                                       in
                                                       from_string plc end of
                                                    Coq_errC _ =>
                                                    Coq_errC
                                                      "Parsing eec_app not successful"
                                                  | Coq_resultC plc0 =>
                                                    (case let val Build_Jsonifiable _
                                                            from_JSON =
                                                            coq_Jsonifiable_ASP_Params
                                                          in
                                                          from_JSON ps end of
                                                       Coq_errC _ =>
                                                       Coq_errC
                                                         "Parsing eec_app not successful"
                                                     | Coq_resultC ps0 =>
                                                       (case let val Build_Serializable _
                                                               from_string =
                                                               coq_Serializable_BS
                                                             in
                                                             from_string bs end of
                                                          Coq_errC _ =>
                                                          Coq_errC
                                                            "Parsing eec_app not successful"
                                                        | Coq_resultC bs0 =>
                                                          (case coq_AppResultC_from_JSON
                                                                  res of
                                                             Coq_errC _ =>
                                                             Coq_errC
                                                               "Parsing eec_app not successful"
                                                           | Coq_resultC res0 =>
                                                             Coq_resultC
                                                               (Coq_eec_app
                                                               plc0 ps0 bs0
                                                               res0)))))
                                               | _ :: _ =>
                                                 Coq_errC
                                                   "Parsing eec_app not successful")
                                            | _ =>
                                              Coq_errC
                                                "Parsing eec_app not successful") end)
                                      | _ =>
                                        Coq_errC
                                          "Parsing eec_app not successful") end)
                                | _ =>
                                  Coq_errC "Parsing eec_app not successful") end)
                          | _ => Coq_errC "Parsing eec_app not successful") end)) end
                 | False =>
                   (case (fn x => fn y => x = y) cons_name "ssc_app" of
                      True =>
                      let val JSON_Object m = js in
                      (case m of
                         [] => Coq_errC "Parsing ssc_app not successful"
                       | _ :: l =>
                         (case l of
                            [] => Coq_errC "Parsing ssc_app not successful"
                          | p0 :: l0 =>
                            let val (_, i) = p0 in
                            (case i of
                               InJSON_Object res1 =>
                               (case l0 of
                                  [] =>
                                  Coq_errC "Parsing ssc_app not successful"
                                | p1 :: l1 =>
                                  let val (_, i0) = p1 in
                                  (case i0 of
                                     InJSON_Object res2 =>
                                     (case l1 of
                                        [] =>
                                        (case coq_AppResultC_from_JSON res1 of
                                           Coq_errC _ =>
                                           Coq_errC
                                             "Parsing ssc_app not successful"
                                         | Coq_resultC res3 =>
                                           (case coq_AppResultC_from_JSON res2 of
                                              Coq_errC _ =>
                                              Coq_errC
                                                "Parsing ssc_app not successful"
                                            | Coq_resultC res4 =>
                                              Coq_resultC (Coq_ssc_app res3
                                                res4)))
                                      | _ :: _ =>
                                        Coq_errC
                                          "Parsing ssc_app not successful")
                                   | _ =>
                                     Coq_errC "Parsing ssc_app not successful") end)
                             | _ => Coq_errC "Parsing ssc_app not successful") end)) end
                    | False => Coq_errC "Invalid AppResultC JSON"))))))

(** val coq_Jsonifiable_AppResultC : coq_AppResultC coq_Jsonifiable **)

val coq_Jsonifiable_AppResultC : coq_AppResultC coq_Jsonifiable =
  Build_Jsonifiable coq_AppResultC_to_Json coq_AppResultC_from_JSON
