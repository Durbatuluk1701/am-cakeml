(** val minify_mapC :
    'a1 coq_EqClass -> ('a1, 'a2) coq_MapC -> ('a1 -> bool) -> ('a1, 'a2)
    coq_MapC **)

fun minify_mapC hA m f =
  case m of
    [] => []
  | p :: tl =>
    let val Coq_pair k v = p in
    (case f k of
       True => (Coq_pair k v) :: (minify_mapC hA tl f)
     | False => minify_mapC hA tl f) end

(** val minify_mapD :
    'a1 coq_EqClass -> 'a2 coq_EqClass -> ('a1, 'a2) coq_MapD -> ('a1 ->
    bool) -> ('a1, 'a2) coq_MapD **)

fun minify_mapD hA hB m f =
  case m of
    [] => []
  | p :: tl =>
    let val Coq_pair k v = p in
    (case f k of
       True => (Coq_pair k v) :: (minify_mapD hA hB tl f)
     | False => minify_mapD hA hB tl f) end

(** val generate_ASP_dispatcher :
    coq_ID_Type coq_EqClass -> coq_AM_Library -> coq_Manifest ->
    coq_ConcreteManifest -> coq_DispatcherErrors coq_ASPCallback **)

fun generate_ASP_dispatcher hID al am =
  let val local_asps_map =
    let val Build_AM_Library _ _ _ _ _ _ _ _ local_ASPS _ _ _ = al in
    local_ASPS end
  in
  let val abstract_asps =
    let val Build_Manifest _ asps _ _ _ _ _ = am in asps end
  in
  let val shrunk_map =
    minify_mapC coq_Eq_Class_ID_Type local_asps_map (fn x =>
      case in_dec (coq_EqClass_impl_DecEq hID) x abstract_asps of
        Coq_left => True
      | Coq_right => False)
  in
  (fn _ par p bs rawEv =>
  let val Coq_asp_paramsC aspid _ _ _ = par in
  (case map_get coq_Eq_Class_ID_Type shrunk_map aspid of
     Some cb =>
     (case cb par p bs rawEv of
        Coq_errC _ => Coq_errC Runtime
      | Coq_resultC r => Coq_resultC r)
   | None => Coq_errC Unavailable) end) end end end

(** val generate_appraisal_ASP_dispatcher :
    coq_ID_Type coq_EqClass -> coq_AM_Library -> coq_Manifest ->
    coq_ConcreteManifest -> coq_DispatcherErrors coq_ASPCallback **)

fun generate_appraisal_ASP_dispatcher hID al am =
  let val local_app_asps_map =
    let val Build_AM_Library _ _ _ _ _ _ _ _ _ local_Appraisal_ASPS _ _ = al
    in
    local_Appraisal_ASPS end
  in
  let val abstract_app_asps =
    let val Build_Manifest _ _ appraisal_asps _ _ _ _ = am in
    appraisal_asps end
  in
  let val shrunk_map =
    minify_mapC (pair_EqClass coq_Eq_Class_ID_Type coq_Eq_Class_ID_Type)
      local_app_asps_map (fn x =>
      case in_dec (coq_EqClass_impl_DecEq (pair_EqClass hID hID)) x
             abstract_app_asps of
        Coq_left => True
      | Coq_right => False)
  in
  (fn _ par p bs rawEv =>
  let val Coq_asp_paramsC aspid _ _ _ = par in
  (case map_get (pair_EqClass coq_Eq_Class_ID_Type coq_Eq_Class_ID_Type)
          shrunk_map (Coq_pair p aspid) of
     Some cb =>
     (case cb par p bs rawEv of
        Coq_errC _ => Coq_errC Runtime
      | Coq_resultC r => Coq_resultC r)
   | None => Coq_errC Unavailable) end) end end end

(** val generate_Plc_dispatcher :
    coq_ID_Type coq_EqClass -> coq_AM_Library -> coq_Manifest ->
    coq_ConcreteManifest -> coq_PlcCallback **)

fun generate_Plc_dispatcher hID al am _ =
  let val local_plc_map =
    let val Build_AM_Library _ _ _ _ _ _ _ _ _ _ local_Plcs _ = al in
    local_Plcs end
  in
  let val abstract_plcs =
    let val Build_Manifest _ _ _ uuidPlcs _ _ _ = am in uuidPlcs end
  in
  let val shrunk_map =
    minify_mapD coq_Eq_Class_ID_Type coq_Eq_Class_uuid local_plc_map (fn x =>
      case in_dec (coq_EqClass_impl_DecEq hID) x abstract_plcs of
        Coq_left => True
      | Coq_right => False)
  in
  (fn p =>
  case map_get hID shrunk_map p of
    Some uuid => Coq_resultC uuid
  | None => Coq_errC Unavailable) end end end

(** val generate_PubKey_dispatcher :
    coq_ID_Type coq_EqClass -> coq_AM_Library -> coq_Manifest ->
    coq_ConcreteManifest -> coq_PubKeyCallback **)

fun generate_PubKey_dispatcher hID al am _ =
  let val local_pubkey_map =
    let val Build_AM_Library _ _ _ _ _ _ _ _ _ _ _ local_PubKeys = al in
    local_PubKeys end
  in
  let val abstract_plcs =
    let val Build_Manifest _ _ _ _ pubKeyPlcs _ _ = am in pubKeyPlcs end
  in
  let val shrunk_map =
    minify_mapD coq_Eq_Class_ID_Type coq_Eq_Class_public_key local_pubkey_map
      (fn x =>
      case in_dec (coq_EqClass_impl_DecEq hID) x abstract_plcs of
        Coq_left => True
      | Coq_right => False)
  in
  (fn p =>
  case map_get hID shrunk_map p of
    Some key => Coq_resultC key
  | None => Coq_errC Unavailable) end end end

(** val generate_UUUID_dispatcher :
    coq_ID_Type coq_EqClass -> coq_AM_Library -> coq_Manifest ->
    coq_ConcreteManifest -> coq_UUIDCallback **)

fun generate_UUUID_dispatcher _ al _ _ =
  let val local_plc_map =
    let val Build_AM_Library _ _ _ _ _ _ _ _ _ _ local_Plcs _ = al in
    local_Plcs end
  in
  (fn u =>
  case mapD_get_key coq_Eq_Class_ID_Type coq_Eq_Class_uuid local_plc_map u of
    Some p => Coq_resultC p
  | None => Coq_errC Unavailable) end

(** val manifest_compiler :
    coq_Manifest -> coq_AM_Library -> coq_AM_Config **)

fun manifest_compiler m al =
  let val cm = Build_ConcreteManifest
    (let val Build_Manifest my_abstract_plc _ _ _ _ _ _ = m in
     my_abstract_plc end)
    (let val Build_Manifest _ _ _ _ _ _ policy = m in policy end)
    (let val Build_Manifest _ asps _ _ _ _ _ = m in asps end)
    (let val Build_Manifest _ _ _ uuidPlcs _ _ _ = m in uuidPlcs end)
    (let val Build_Manifest _ _ _ _ pubKeyPlcs _ _ = m in pubKeyPlcs end)
    (let val Build_Manifest _ _ _ _ _ targetPlcs _ = m in targetPlcs end)
    (let val Build_AM_Library _ _ _ _ aSPServer_Addr _ _ _ _ _ _ _ = al in
     aSPServer_Addr end)
    (let val Build_AM_Library _ _ _ _ _ pubKeyServer_Addr _ _ _ _ _ _ = al in
     pubKeyServer_Addr end)
    (let val Build_AM_Library _ _ _ _ _ _ plcServer_Addr _ _ _ _ _ = al in
     plcServer_Addr end)
    (let val Build_AM_Library _ _ _ _ _ _ _ uUIDServer_Addr _ _ _ _ = al in
     uUIDServer_Addr end)
  in
  Coq_mkAmConfig cm (generate_ASP_dispatcher coq_Eq_Class_ID_Type al m cm)
  (generate_appraisal_ASP_dispatcher coq_Eq_Class_ID_Type al m cm)
  (generate_Plc_dispatcher coq_Eq_Class_ID_Type al m cm)
  (generate_PubKey_dispatcher coq_Eq_Class_ID_Type al m cm)
  (generate_UUUID_dispatcher coq_Eq_Class_ID_Type al m cm) end
