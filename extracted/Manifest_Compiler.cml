(** val minify_mapD :
    'a1 coq_EqClass -> 'a2 coq_EqClass -> ('a1, 'a2) coq_MapD -> ('a1 ->
    bool) -> ('a1, 'a2) coq_MapD **)

fun minify_mapD hA hB m f =
  case m of
    [] => []
  | p :: tl =>
    let val (k, v) = p in
    (case f k of
       True => (k, v) :: (minify_mapD hA hB tl f)
     | False => minify_mapD hA hB tl f) end

(** val generate_ASP_dispatcher' :
    coq_Manifest -> coq_AM_Library -> coq_FS_Location -> coq_ASP_PARAMS ->
    coq_RawEv -> (coq_RawEv, coq_DispatcherErrors) coq_ResultT **)

fun generate_ASP_dispatcher' am al aspBin par rawEv =
  let val Coq_asp_paramsC aspid args targ_plc targ = par in
  let val asps = let val Build_Manifest _ asps _ _ _ _ = am in asps end in
  let val asp_to_concrete_map =
    let val Build_AM_Library _ lib_ASPs _ _ _ = al in lib_ASPs end
  in
  (case in_dec_set coq_Eq_Class_ID_Type aspid asps of
     True =>
     (case map_get coq_Eq_Class_ID_Type asp_to_concrete_map aspid of
        Some conc_asp_loc =>
        let val asp_req = Coq_mkASPRReq aspid args targ_plc targ rawEv in
        let val js_req = coq_ASPRunRequest_to_JSON asp_req in
        let val resp_res =
          make_JSON_FS_Location_Request aspBin conc_asp_loc js_req
        in
        (case resp_res of
           Coq_errC msg => Coq_errC (Runtime msg)
         | Coq_resultC js_resp =>
           (case coq_JSON_to_ASPRunResponse js_resp of
              Coq_errC msg => Coq_errC (Runtime msg)
            | Coq_resultC r =>
              let val Coq_mkASPRResp _ bs = r in Coq_resultC bs end)) end end end
      | None => Coq_errC Unavailable)
   | False => Coq_errC Unavailable) end end end

(** val generate_ASP_dispatcher :
    coq_ID_Type coq_EqClass -> coq_Manifest -> coq_AM_Library ->
    coq_FS_Location -> coq_DispatcherErrors coq_ASPCallback **)

fun generate_ASP_dispatcher _ =
  generate_ASP_dispatcher'

(** val generate_Plc_dispatcher :
    coq_ID_Type coq_EqClass -> coq_AM_Library -> coq_Manifest ->
    coq_PlcCallback **)

fun generate_Plc_dispatcher hID al am =
  let val local_plc_map =
    let val Build_AM_Library _ _ lib_Plcs _ _ = al in lib_Plcs end
  in
  let val abstract_plcs =
    let val Build_Manifest _ _ uuidPlcs _ _ _ = am in uuidPlcs end
  in
  let val shrunk_map =
    minify_mapD hID coq_Eq_Class_uuid local_plc_map (fn x =>
      case in_dec_set hID x abstract_plcs of
        True => True
      | False => False)
  in
  (fn p =>
  case map_get hID shrunk_map p of
    Some uuid => Coq_resultC uuid
  | None => Coq_errC Unavailable) end end end

(** val generate_PubKey_dispatcher :
    coq_ID_Type coq_EqClass -> coq_AM_Library -> coq_Manifest ->
    coq_PubKeyCallback **)

fun generate_PubKey_dispatcher hID al am =
  let val local_pubkey_map =
    let val Build_AM_Library _ _ _ lib_PubKeys _ = al in lib_PubKeys end
  in
  let val abstract_plcs =
    let val Build_Manifest _ _ _ pubKeyPlcs _ _ = am in pubKeyPlcs end
  in
  let val shrunk_map =
    minify_mapD hID coq_Eq_Class_public_key local_pubkey_map (fn x =>
      case in_dec_set hID x abstract_plcs of
        True => True
      | False => False)
  in
  (fn p =>
  case map_get hID shrunk_map p of
    Some key => Coq_resultC key
  | None => Coq_errC Unavailable) end end end

(** val manifest_compiler :
    coq_Manifest -> coq_AM_Library -> coq_FS_Location -> coq_AM_Config **)

fun manifest_compiler m al aspBin =
  Coq_mkAmConfig m
    (let val Build_AM_Library uUID_AM_Clone _ _ _ _ = al in uUID_AM_Clone end)
    (let val Build_AM_Library _ _ _ _ aSP_Compat_Map = al in
     aSP_Compat_Map end)
    (generate_ASP_dispatcher coq_Eq_Class_ID_Type m al aspBin)
    (generate_Plc_dispatcher coq_Eq_Class_ID_Type al m)
    (generate_PubKey_dispatcher coq_Eq_Class_ID_Type al m)
