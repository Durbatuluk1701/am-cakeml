(** val manifest_union_asps :
    coq_Manifest -> coq_Manifest -> coq_Manifest **)

fun manifest_union_asps m1 m2 =
  let val Build_Manifest asps1 asp_comp_map1 asp_fs_map1 myPol1 = m1 in
  let val Build_Manifest asps2 _ _ _ = m2 in
  Build_Manifest (manset_union coq_Eq_Class_ID_Type asps1 asps2)
  asp_comp_map1 asp_fs_map1 myPol1 end end

(** val environment_union'' :
    coq_Plc -> coq_Manifest -> coq_EnvironmentM -> coq_EnvironmentM **)

fun environment_union'' p m1 e2 =
  case map_get coq_Eq_Class_ID_Type e2 p of
    Some m2 =>
    let val new_man = manifest_union_asps m2 m1 in
    map_set coq_Eq_Class_ID_Type e2 p new_man end
  | None => map_set coq_Eq_Class_ID_Type e2 p m1

(** val env_union_helper :
    (coq_Plc * coq_Manifest) -> coq_EnvironmentM -> coq_EnvironmentM **)

fun env_union_helper e1_pr e2 =
  environment_union'' (fst e1_pr) (snd e1_pr) e2

(** val environment_union :
    coq_EnvironmentM -> coq_EnvironmentM -> coq_EnvironmentM **)

fun environment_union e1 e2 =
  fold_right env_union_helper e2 e1
